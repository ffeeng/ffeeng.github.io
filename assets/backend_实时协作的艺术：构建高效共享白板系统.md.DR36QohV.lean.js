import{_ as s,c as n,b as a,o as l}from"./chunks/framework.CUf7xJpa.js";const p=JSON.parse('{"title":"实时协作的艺术：构建高效共享白板系统","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 多人协同关键技术","slug":"_1-多人协同关键技术","link":"#_1-多人协同关键技术","children":[]},{"level":2,"title":"2. 算法对比：OT VS CRDTs","slug":"_2-算法对比-ot-vs-crdts","link":"#_2-算法对比-ot-vs-crdts","children":[]},{"level":2,"title":"3. 传输对比：WebSockets VS WebRTC","slug":"_3-传输对比-websockets-vs-webrtc","link":"#_3-传输对比-websockets-vs-webrtc","children":[]},{"level":2,"title":"4. 简版实现","slug":"_4-简版实现","link":"#_4-简版实现","children":[{"level":3,"title":"4.1 Server","slug":"_4-1-server","link":"#_4-1-server","children":[]},{"level":3,"title":"4.2 浏览器端","slug":"_4-2-浏览器端","link":"#_4-2-浏览器端","children":[]},{"level":3,"title":"4.3 简单加密/解密处理","slug":"_4-3-简单加密-解密处理","link":"#_4-3-简单加密-解密处理","children":[]}]}],"relativePath":"backend/实时协作的艺术：构建高效共享白板系统.md","filePath":"backend/实时协作的艺术：构建高效共享白板系统.md"}');const o=s({name:"backend/实时协作的艺术：构建高效共享白板系统.md"},[["render",function(s,p,o,e,t,c){return l(),n("div",null,p[0]||(p[0]=[a('<h1 id="实时协作的艺术-构建高效共享白板系统" tabindex="-1">实时协作的艺术：构建高效共享白板系统 <a class="header-anchor" href="#实时协作的艺术-构建高效共享白板系统" aria-label="Permalink to &quot;实时协作的艺术：构建高效共享白板系统&quot;">​</a></h1><p><img src="https://github.com/lecepin/blog/assets/11046969/31809d0a-cb8e-45d4-a8ad-5b08794afd5e" alt="image"></p><p>前面看到一个共享白板的场景，如：发给你一个地址，让你在上面做题，双方都可以进行实时编辑。这个功能小而美，这里简单实现下。</p><h2 id="_1-多人协同关键技术" tabindex="-1">1. 多人协同关键技术 <a class="header-anchor" href="#_1-多人协同关键技术" aria-label="Permalink to &quot;1. 多人协同关键技术&quot;">​</a></h2><p>实现多人协同编辑共享白板的功能，可以用到以下几种关键技术：</p><ol><li><p><strong>WebSockets</strong>: WebSockets 提供了一个全双工的通信渠道，允许数据在客户端和服务器之间实时、快速地双向传输。这对于多人实时协作尤其重要。</p></li><li><p><strong>Operational Transformation (OT)</strong>: 这是一种算法，用于同步和解决多个用户同时对同一个文档进行操作时可能产生的冲突。Google Docs 使用的就是这种技术。</p></li><li><p><strong>Conflict-free Replicated Data Types (CRDTs)</strong>: CRDTs 是一种数据结构，它允许同时在多个设备上对数据进行修改，并能够确保最终的一致性，不需要复杂的冲突解决策略。</p></li><li><p><strong>Real-time Database</strong>: 如 Firebase Realtime Database 或 Amazon DynamoDB 等，这些数据库支持实时数据同步。</p></li><li><p><strong>Backend as a Service (BaaS)</strong>: 服务如 Firebase、Azure 或 AWS Amplify 等，提供了实时数据库、身份验证、托管等服务，可以简化多人协同编辑功能的后端开发。</p></li><li><p><strong>REST API/GraphQL</strong>: 对于非实时的数据同步需求，可以使用 REST API 或 GraphQL 来处理数据的获取和更新。</p></li><li><p><strong>WebRTC</strong>: WebRTC 支持浏览器之间的点对点通信，可以用于支持实时音视频聊天等功能。</p></li><li><p><strong>Security</strong>: 使用 OAuth, JWT 等进行身份验证和授权，确保数据安全。</p></li><li><p><strong>Message Queue</strong>: 使用消息队列（如 RabbitMQ, Kafka）可以帮助实现高效、可靠的消息分发机制，适用于大规模的协作场景。</p></li><li><p><strong>Microservices Architecture</strong>: 采用微服务架构，可以将复杂的应用拆分成更容易管理和扩展的小模块。</p></li><li><p><strong>Load Balancing</strong>: 在服务器端使用负载均衡技术来分配客户端请求，确保系统的高可用性和伸缩性。</p></li></ol><h2 id="_2-算法对比-ot-vs-crdts" tabindex="-1">2. 算法对比：OT VS CRDTs <a class="header-anchor" href="#_2-算法对比-ot-vs-crdts" aria-label="Permalink to &quot;2. 算法对比：OT VS CRDTs&quot;">​</a></h2><p>Operational Transformation (OT) 和 Conflict-free Replicated Data Types (CRDTs) 都是解决分布式系统中数据一致性问题的算法，但它们在理念和实现上有所不同。</p><p><strong>Operational Transformation (OT):</strong><img src="https://github.com/lecepin/blog/assets/11046969/51f05e07-a830-4040-8321-e00a9ab0d6c8" alt="image"></p><ul><li><strong>概念</strong>: OT 通过转换同时发生的操作来解决冲突，它需要跟踪每个操作的上下文信息，包括操作的位置和历史。</li><li><strong>实现</strong>: 通常需要一个中心服务器来进行操作转换和冲突解决，确保所有客户端最终都看到相同的文档状态。</li><li><strong>优点</strong>: 在某些情况下，OT 可以提供更精细的控制和更多的协作特性。</li><li><strong>缺点</strong>: 实现复杂，对网络延迟敏感。</li></ul><p><strong>Conflict-free Replicated Data Types (CRDTs):</strong></p><p><img src="https://github.com/lecepin/blog/assets/11046969/a28424b1-f63c-4df3-8970-f4af64a56011" alt="image"></p><ul><li><strong>概念</strong>: CRDTs 通过确保所有操作都是可交换的（Commutative）和可合并的（Associative）来避免冲突，不需要中心服务器来解决冲突。</li><li><strong>实现</strong>: 客户端可以独立地执行操作，并通过一种最终一致性的方式来同步更新。</li><li><strong>优点</strong>: 结构简单，适合离线和网络不稳定的环境。</li><li><strong>缺点</strong>: 可能无法支持某些需要精确控制操作顺序的协作特性。</li></ul><p>以下是基于 Node.js 的简化示例，展示 OT 和 CRDTs 的基本概念：</p><p><strong>OT 示例 (Node.js):</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 假设有两个操作：用户 A 在位置0插入字符&quot;a&quot;，用户 B 在位置0插入字符&quot;b&quot;。</span></span>\n<span class="line"><span style="color:#6A737D;">// 服务器需要转换其中一个操作，以保持一致性。</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 初始字符串</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> document </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 用户 A 的操作</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> opA</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> { position: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, char: </span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">, type: </span><span style="color:#9ECBFF;">&quot;insert&quot;</span><span style="color:#E1E4E8;"> };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 用户 B 的操作</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> opB</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> { position: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, char: </span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">, type: </span><span style="color:#9ECBFF;">&quot;insert&quot;</span><span style="color:#E1E4E8;"> };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// OT 转换函数</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> transform</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">op1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">op2</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">    op1.position </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> op2.position </span><span style="color:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    op1.type </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;insert&quot;</span><span style="color:#F97583;"> &amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    op2.type </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;insert&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  ) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    op1.position </span><span style="color:#F97583;">+=</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> op1;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 服务器转换操作</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> transformedOpA</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> transform</span><span style="color:#E1E4E8;">(opA, opB);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 应用操作</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> applyOp</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">op</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  document </span><span style="color:#F97583;">=</span></span>\n<span class="line"><span style="color:#E1E4E8;">    document.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, op.position) </span><span style="color:#F97583;">+</span></span>\n<span class="line"><span style="color:#E1E4E8;">    op.char </span><span style="color:#F97583;">+</span></span>\n<span class="line"><span style="color:#E1E4E8;">    document.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(op.position);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 按顺序应用操作</span></span>\n<span class="line"><span style="color:#B392F0;">applyOp</span><span style="color:#E1E4E8;">(opB);</span></span>\n<span class="line"><span style="color:#B392F0;">applyOp</span><span style="color:#E1E4E8;">(transformedOpA);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(document); </span><span style="color:#6A737D;">// 输出 &quot;ba&quot;</span></span></code></pre></div><p><strong>CRDTs 示例 (Node.js):</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 假设我们有一个可合并的计数器 CRDT，任何节点都可以独立增加计数器，然后通过某种机制合并。</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> GCounter</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">  constructor</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.counts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 增加当前节点的计数</span></span>\n<span class="line"><span style="color:#B392F0;">  increment</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">nodeId</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.counts[nodeId]) {</span></span>\n<span class="line"><span style="color:#79B8FF;">      this</span><span style="color:#E1E4E8;">.counts[nodeId] </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.counts[nodeId] </span><span style="color:#F97583;">+=</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 合并来自其他节点的计数器</span></span>\n<span class="line"><span style="color:#B392F0;">  merge</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">otherCounter</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">    for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> nodeId </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> otherCounter.counts) {</span></span>\n<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#F97583;">        !</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.counts[nodeId] </span><span style="color:#F97583;">||</span></span>\n<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">.counts[nodeId] </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> otherCounter.counts[nodeId]</span></span>\n<span class="line"><span style="color:#E1E4E8;">      ) {</span></span>\n<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">.counts[nodeId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> otherCounter.counts[nodeId];</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 获取总计数</span></span>\n<span class="line"><span style="color:#B392F0;">  getValue</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.counts).</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">sum</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">count</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> count, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 创建两个节点的计数器</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> counterA</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> GCounter</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> counterB</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> GCounter</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 节点 A 和节点 B 独立计数</span></span>\n<span class="line"><span style="color:#E1E4E8;">counterA.</span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;A&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">counterB.</span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;B&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 合并计数器状态</span></span>\n<span class="line"><span style="color:#E1E4E8;">counterA.</span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">(counterB);</span></span>\n<span class="line"><span style="color:#E1E4E8;">counterB.</span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">(counterA);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(counterA.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 输出 &quot;2&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(counterB.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 输出 &quot;2&quot;</span></span></code></pre></div><p>在上述两个示例中，OT 示例展示了在文本协作编辑场景中如何使用操作转换来保持文档一致性。而 CRDTs 示例则展示了在计数器场景下如何使用可合并的计数器来确保最终一致性，无需考虑操作的顺序。</p><p>需要注意，以上示例仅用于描述 OT 和 CRDTs 的基本概念，并非完整的协同编辑系统实现。在实际的多人协同编辑应用中，OT 和 CRDTs 的实现会更加复杂，涉及到更多的边界情况和性能优化。</p><h2 id="_3-传输对比-websockets-vs-webrtc" tabindex="-1">3. 传输对比：WebSockets VS WebRTC <a class="header-anchor" href="#_3-传输对比-websockets-vs-webrtc" aria-label="Permalink to &quot;3. 传输对比：WebSockets VS WebRTC&quot;">​</a></h2><p>WebSockets 和 WebRTC 是两种不同的技术，它们都可以在浏览器中用于实现实时通信，但是它们的设计目标、用例和实现方式存在显著差异。</p><p><strong>WebSockets:</strong></p><ol><li><p><strong>基本概念</strong>：WebSockets 提供了一个全双工的通信协议，允许客户端与服务器之间建立一个持久的连接，并通过这个连接进行实时的数据交换。</p></li><li><p><strong>特点</strong>：</p></li></ol><ul><li>基于 TCP 连接。</li><li>协议标识符为 <code>ws://</code> 或加密的 <code>wss://</code>。</li><li>适用于客户端和服务器之间的任意类型的数据传输。</li><li>没有内置的直接点对点（P2P）通信能力；所有通信都是通过服务器进行中转的。</li></ul><ol start="3"><li><strong>优势</strong>：</li></ol><ul><li>降低了服务器和客户端之间通信的延迟。</li><li>支持文本和二进制数据的传输。</li><li>被广泛支持，大多数现代浏览器都提供了原生的 WebSocket 支持。</li></ul><ol start="4"><li><strong>劣势</strong>：</li></ol><ul><li>不适合用于 P2P 场景，因为数据传输需要通过服务器中转。</li><li>相比于 HTTP 轮询，WebSocket 更复杂，需要服务器端支持 WebSocket 协议。</li></ul><p><strong>WebRTC:</strong></p><ol><li><p><strong>基本概念</strong>：WebRTC（Web Real-Time Communication）是一个支持网页浏览器进行实时语音对话、视频对话和点对点文件共享的技术。</p></li><li><p><strong>特点</strong>：</p></li></ol><ul><li>提供了 P2P 直接通信的能力，不需要服务器中转数据（除了在建立连接时需要信令服务器）。</li><li>协议标准复杂，包括了一组不同的 API 和协议。</li><li>支持数据通道（Data Channels）、音频和视频流。</li><li>通信可以是加密的，且通常建立在 UDP 上，以减少延迟。</li></ul><ol start="3"><li><strong>优势</strong>：</li></ol><ul><li>适合于视频/语音通话、实时游戏、P2P 文件共享等高实时性和带宽敏感的应用。</li><li>减少服务器带宽需求，因为数据可以直接在用户之间传输。</li><li>支持 NAT 穿透和加密，安全性较高。</li></ul><ol start="4"><li><strong>劣势</strong>：</li></ol><ul><li>实现复杂，需要处理 NAT 穿透、会话控制协议（如 ICE、STUN、TURN）等。</li><li>对于非实时、高可靠性要求的数据传输场景可能不是最佳选择。</li></ul><p><strong>适合的场景</strong>：</p><ul><li><p><strong>WebSockets</strong>：</p><ul><li>聊天应用：需要服务器存储和转发消息。</li><li>多人在线游戏：服务器维护游戏逻辑和状态。</li><li>实时数据更新：如股票行情、新闻直播等。</li><li>协同工作应用：如文档编辑、项目管理工具等。</li></ul></li><li><p><strong>WebRTC</strong>：</p><ul><li>视频/语音通话：如 Skype 的网页版。</li><li>实时 P2P 游戏：需要低延迟的双方通讯。</li><li>私密文件共享：直接在用户间传输数据，不通过服务器。</li><li>实时音视频直播：支持大规模的 P2P 数据流传输。</li></ul></li></ul><p>总的来说，WebSockets 主要用于需要服务器处理逻辑的实时通信，而 WebRTC 适用于需要直接点对点通信，且对延迟和带宽有更高要求的场景。根据应用的需求和设计，可以选择合适的技术来实现。</p><h2 id="_4-简版实现" tabindex="-1">4. 简版实现 <a class="header-anchor" href="#_4-简版实现" aria-label="Permalink to &quot;4. 简版实现&quot;">​</a></h2><p>这里直接采用 WebSockets 简单实现一下。</p><p><img src="https://github.com/lecepin/blog/assets/11046969/74f9436e-ff04-4015-b4f0-7bfbb30fe9c8" alt="image"></p><h3 id="_4-1-server" tabindex="-1">4.1 Server <a class="header-anchor" href="#_4-1-server" aria-label="Permalink to &quot;4.1 Server&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 从相应的包中导入所需模块。</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> express </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &quot;express&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> http </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &quot;http&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> WebSocket, { WebSocketServer } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &quot;ws&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 创建一个新的 Express 应用实例。</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> express</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 使用 Express 应用创建一个新的 HTTP 服务器。</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> server</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> http.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">(app);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 初始化一个新的 WebSocket 服务器实例并将其挂载到 HTTP 服务器上。</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> wss</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> WebSocketServer</span><span style="color:#E1E4E8;">({ server });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 设置 Express 应用以从&quot;public&quot;目录提供静态文件。</span></span>\n<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(express.</span><span style="color:#B392F0;">static</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;public&quot;</span><span style="color:#E1E4E8;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 为 WebSocket 服务器的&#39;connection&#39;事件定义行为。</span></span>\n<span class="line"><span style="color:#E1E4E8;">wss.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;connection&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> connection</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ws</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">  // 通知所有客户端有新用户连接。</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> userConnected</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    type: </span><span style="color:#9ECBFF;">&quot;user-event&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    event: </span><span style="color:#9ECBFF;">&quot;connected&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    userCount: wss.clients.size, </span><span style="color:#6A737D;">// 包含当前用户数量。</span></span>\n<span class="line"><span style="color:#E1E4E8;">  };</span></span>\n<span class="line"><span style="color:#6A737D;">  // 将用户连接事件广播给所有客户端（除了新连接的用户）。</span></span>\n<span class="line"><span style="color:#B392F0;">  broadcast</span><span style="color:#E1E4E8;">(ws, </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(userConnected), </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 为 WebSocket 实例的&#39;message&#39;事件定义行为。</span></span>\n<span class="line"><span style="color:#E1E4E8;">  ws.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> incoming</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">    // 将接收到的消息广播给所有客户端。</span></span>\n<span class="line"><span style="color:#B392F0;">    broadcast</span><span style="color:#E1E4E8;">(ws, data.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>\n<span class="line"><span style="color:#E1E4E8;">  });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 为 WebSocket 实例的&#39;close&#39;事件定义行为。</span></span>\n<span class="line"><span style="color:#E1E4E8;">  ws.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;close&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> close</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#6A737D;">    // 通知所有客户端用户已断开连接。</span></span>\n<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> userDisconnected</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      type: </span><span style="color:#9ECBFF;">&quot;user-event&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      event: </span><span style="color:#9ECBFF;">&quot;disconnected&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      userCount: wss.clients.size </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 更新用户数量。</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"><span style="color:#6A737D;">    // 将用户断开连接事件广播给所有客户端。</span></span>\n<span class="line"><span style="color:#B392F0;">    broadcast</span><span style="color:#E1E4E8;">(ws, </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(userDisconnected), </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  });</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 在8083端口启动 HTTP 服务器。</span></span>\n<span class="line"><span style="color:#E1E4E8;">server.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8083</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;服务器正在 http://localhost:8083 上运行&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 定义一个函数来向所有已连接的 WebSocket 客户端广播数据。</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> broadcast</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">client</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">excludeSelf</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">  // 遍历所有已连接的 WebSocket 客户端。</span></span>\n<span class="line"><span style="color:#E1E4E8;">  wss.clients.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> each</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">otherClient</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">    // 检查是否排除发送者以及其他客户端的 WebSocket 是否处于开放状态。</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">      excludeSelf</span></span>\n<span class="line"><span style="color:#F97583;">        ?</span><span style="color:#E1E4E8;"> otherClient </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> client </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> otherClient.readyState </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> WebSocket.</span><span style="color:#79B8FF;">OPEN</span></span>\n<span class="line"><span style="color:#F97583;">        :</span><span style="color:#79B8FF;"> true</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>\n<span class="line"><span style="color:#6A737D;">      // 向其他客户端发送数据。</span></span>\n<span class="line"><span style="color:#E1E4E8;">      otherClient.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(data);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  });</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="_4-2-浏览器端" tabindex="-1">4.2 浏览器端 <a class="header-anchor" href="#_4-2-浏览器端" aria-label="Permalink to &quot;4.2 浏览器端&quot;">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;!</span><span style="color:#85E89D;">DOCTYPE</span><span style="color:#B392F0;"> html</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#B392F0;"> charset</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;viewport&quot;</span><span style="color:#B392F0;"> content</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;共享白板&lt;/</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#6A737D;">  &lt;!-- 页面的样式，设置了 html 和 body 的高度和边距，以及文本域的宽度和高度 --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#85E89D;">    html</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#85E89D;">    body</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#79B8FF;">      height</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">100</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#79B8FF;">      margin</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#79B8FF;">      padding</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#79B8FF;">      display</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">flex</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#79B8FF;">      flex-direction</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">column</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#79B8FF;">      align-items</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">center</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#85E89D;">    h1</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#79B8FF;">      height</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">vh</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#85E89D;">    textarea</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#79B8FF;">      width</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">90</span><span style="color:#F97583;">vw</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#79B8FF;">      height</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span><span style="color:#F97583;">vh</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#79B8FF;">      outline</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">none</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#6A737D;">  &lt;!-- 页面标题，其中包含在线人数的显示 --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;共享白板：(&lt;</span><span style="color:#85E89D;">span</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;count&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;)&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#6A737D;">  &lt;!-- 可供多人共享编辑的文本域 --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">textarea</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;sharedTextarea&quot;</span><span style="color:#B392F0;"> rows</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;10&quot;</span><span style="color:#B392F0;"> cols</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;50&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">textarea</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#6A737D;">  &lt;!-- 引入 lodash 库，用于函数防抖 --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/lodash.js/4.17.21/lodash.min.js&quot;</span></span>\n<span class="line"><span style="color:#B392F0;">    crossorigin</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;anonymous&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#6A737D;">// 创建 WebSocket 连接，连接到当前页面的主机地址</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> ws</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> WebSocket</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ws://&#39;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> location.host);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 当从 WebSocket 收到消息时的处理逻辑</span></span>\n<span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">onmessage</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> async</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">    // 解析收到的消息</span></span>\n<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> message</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(event.data);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // 判断消息类型</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (message.type </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;text-update&#39;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">        // 如果是文本更新消息，则更新文本域的内容及光标位置</span></span>\n<span class="line"><span style="color:#F97583;">        const</span><span style="color:#79B8FF;"> textarea</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;sharedTextarea&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        textarea.</span><span style="color:#B392F0;">focus</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">        textarea.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> message.content;</span></span>\n<span class="line"><span style="color:#6A737D;">        // 更新光标位置</span></span>\n<span class="line"><span style="color:#E1E4E8;">        textarea.selectionStart </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> message.selectionStart;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        textarea.selectionEnd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> message.selectionEnd;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;"> (message.type </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;user-event&#39;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">        // 如果是用户事件（连接或断开），更新在线人数显示</span></span>\n<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;User event:&#39;</span><span style="color:#E1E4E8;">, message.event, </span><span style="color:#9ECBFF;">&#39;Current user count:&#39;</span><span style="color:#E1E4E8;">, message.userCount);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;count&#39;</span><span style="color:#E1E4E8;">).innerText </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> message.userCount </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &#39;人在线&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 当 WebSocket 连接关闭时的处理逻辑</span></span>\n<span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">onclose</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;"> () {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;WebSocket connection closed&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;count&#39;</span><span style="color:#E1E4E8;">).innerText </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;已离线&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 发送更新内容到服务器的函数</span></span>\n<span class="line"><span style="color:#F97583;">async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> sendUpdate</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> textarea</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;sharedTextarea&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> content</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> textarea.value</span></span>\n<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> message</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        type: </span><span style="color:#9ECBFF;">&#39;text-update&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        content,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        selectionStart: textarea.selectionStart,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        selectionEnd: textarea.selectionEnd</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"><span style="color:#6A737D;">    // 通过 WebSocket 发送更新消息</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ws.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(message));</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 使用 lodash 的防抖函数，限制 sendUpdate 函数的触发频率</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> dSendUpdate</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> _.</span><span style="color:#B392F0;">debounce</span><span style="color:#E1E4E8;">(sendUpdate, </span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 给文本域添加事件监听，当输入、鼠标释放和键盘释放事件发生时触发更新</span></span>\n<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;sharedTextarea&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;input&#39;</span><span style="color:#E1E4E8;">, dSendUpdate);</span></span>\n<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;sharedTextarea&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mouseup&#39;</span><span style="color:#E1E4E8;">, dSendUpdate);</span></span>\n<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;sharedTextarea&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;keyup&#39;</span><span style="color:#E1E4E8;">, dSendUpdate);</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>这段代码构成了一个简单的共享白板 HTML 页面，用户可以在文本域中输入并实时与其他用户共享内容。通过 WebSocket 通信机制，用户的每次输入都会被发送到服务器，并由服务器广播给其他用户，实现协编辑的效果。同时，页面还能够显示当前在线的用户数量。使用了 lodash 库中的<code>debounce</code>函数来限制发送更新的频率，避免因为频繁通信而导致的性能问题。</p><h3 id="_4-3-简单加密-解密处理" tabindex="-1">4.3 简单加密/解密处理 <a class="header-anchor" href="#_4-3-简单加密-解密处理" aria-label="Permalink to &quot;4.3 简单加密/解密处理&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 定义一个异步函数用于加密文本。</span></span>\n<span class="line"><span style="color:#F97583;">async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> en</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">textToEncrypt</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">  // 使用 TextEncoder 将文本转换为 UTF-8编码的字节。</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> encoder</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> TextEncoder</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> data</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> encoder.</span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">(textToEncrypt);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 从 localStorage 中读取 AES 密钥，将十六进制字符串转换为字节数组。</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> keyBuffer</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Uint8Array</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">    localStorage</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">getItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;aesKey&quot;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[\\da-f]</span><span style="color:#F97583;">{2}</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gi</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">h</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> parseInt</span><span style="color:#E1E4E8;">(h, </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">))</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 从 localStorage 中读取初始化向量(IV)，将十六进制字符串转换为字节数组。</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> ivBuffer</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Uint8Array</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">    localStorage</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">getItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;aesIv&quot;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[\\da-f]</span><span style="color:#F97583;">{2}</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gi</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">h</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> parseInt</span><span style="color:#E1E4E8;">(h, </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">))</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 导入密钥，用于后续的加密操作。</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> key</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> window.crypto.subtle.</span><span style="color:#B392F0;">importKey</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#9ECBFF;">    &quot;raw&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 密钥数据的格式。</span></span>\n<span class="line"><span style="color:#E1E4E8;">    keyBuffer, </span><span style="color:#6A737D;">// 密钥数据。</span></span>\n<span class="line"><span style="color:#9ECBFF;">    &quot;AES-CBC&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 使用的加密算法。</span></span>\n<span class="line"><span style="color:#79B8FF;">    true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 密钥是否可导出。</span></span>\n<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#9ECBFF;">&quot;encrypt&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;decrypt&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// 密钥用途。</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 执行加密操作。</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> encryptedData</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> window.crypto.subtle.</span><span style="color:#B392F0;">encrypt</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">    {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#9ECBFF;">&quot;AES-CBC&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 使用的加密算法。</span></span>\n<span class="line"><span style="color:#E1E4E8;">      iv: ivBuffer, </span><span style="color:#6A737D;">// 初始向量。</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    key, </span><span style="color:#6A737D;">// 导入的密钥。</span></span>\n<span class="line"><span style="color:#E1E4E8;">    data </span><span style="color:#6A737D;">// 要加密的数据。</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 将加密后的数据转换为 Base64字符串。</span></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#B392F0;"> btoa</span><span style="color:#E1E4E8;">(String.fromCharCode.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Uint8Array</span><span style="color:#E1E4E8;">(encryptedData)));</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 定义一个异步函数用于解密 Base64字符串。</span></span>\n<span class="line"><span style="color:#F97583;">async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> de</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">base64String</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">  // 将 Base64字符串转换为字节数组。</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> encryptedData</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Uint8Array</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#B392F0;">    atob</span><span style="color:#E1E4E8;">(base64String)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">char</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> char.</span><span style="color:#B392F0;">charCodeAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">))</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 从 localStorage 中读取 AES 密钥，将十六进制字符串转换为字节数组。</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> keyBuffer</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Uint8Array</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">    localStorage</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">getItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;aesKey&quot;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[\\da-f]</span><span style="color:#F97583;">{2}</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gi</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">h</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> parseInt</span><span style="color:#E1E4E8;">(h, </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">))</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 从 localStorage 中读取初始化向量(IV)，将十六进制字符串转换为字节数组。</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> ivBuffer</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Uint8Array</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">    localStorage</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">getItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;aesIv&quot;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[\\da-f]</span><span style="color:#F97583;">{2}</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gi</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">h</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> parseInt</span><span style="color:#E1E4E8;">(h, </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">))</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 导入密钥，用于后续的解密操作。</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> key</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> window.crypto.subtle.</span><span style="color:#B392F0;">importKey</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#9ECBFF;">    &quot;raw&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 密钥数据的格式。</span></span>\n<span class="line"><span style="color:#E1E4E8;">    keyBuffer, </span><span style="color:#6A737D;">// 密钥数据。</span></span>\n<span class="line"><span style="color:#9ECBFF;">    &quot;AES-CBC&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 使用的加密算法。</span></span>\n<span class="line"><span style="color:#79B8FF;">    true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 密钥是否可导出。</span></span>\n<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#9ECBFF;">&quot;encrypt&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;decrypt&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// 密钥用途。</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 执行解密操作。</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> decryptedData</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> window.crypto.subtle.</span><span style="color:#B392F0;">decrypt</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">    {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#9ECBFF;">&quot;AES-CBC&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 使用的加密算法。</span></span>\n<span class="line"><span style="color:#E1E4E8;">      iv: ivBuffer, </span><span style="color:#6A737D;">// 初始向量。</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    key, </span><span style="color:#6A737D;">// 导入的密钥。</span></span>\n<span class="line"><span style="color:#E1E4E8;">    encryptedData </span><span style="color:#6A737D;">// 要解密的数据。</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 使用 TextDecoder 将解密后的字节数据转换为文本。</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> decoder</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> TextDecoder</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> decoder.</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(decryptedData);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>详细参考：<a href="https://github.com/lecepin/websocket-whiteboard" target="_blank" rel="noreferrer">https://github.com/lecepin/websocket-whiteboard</a></p>',50)]))}]]);export{p as __pageData,o as default};
