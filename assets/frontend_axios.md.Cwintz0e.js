import{_ as s,c as n,b as a,o as l}from"./chunks/framework.CUf7xJpa.js";const p=JSON.parse('{"title":"axios","description":"","frontmatter":{},"headers":[{"level":2,"title":"定位","slug":"定位","link":"#定位","children":[]},{"level":2,"title":"特性","slug":"特性","link":"#特性","children":[]},{"level":2,"title":"洋葱模型","slug":"洋葱模型","link":"#洋葱模型","children":[]},{"level":2,"title":"axios请求图片","slug":"axios请求图片","link":"#axios请求图片","children":[]},{"level":2,"title":"全部配置axios.defaults","slug":"全部配置axios-defaults","link":"#全部配置axios-defaults","children":[]},{"level":2,"title":"axios对象","slug":"axios对象","link":"#axios对象","children":[]},{"level":2,"title":"axios适配器","slug":"axios适配器","link":"#axios适配器","children":[]},{"level":2,"title":"axios方法","slug":"axios方法","link":"#axios方法","children":[]},{"level":2,"title":"核心函数","slug":"核心函数","link":"#核心函数","children":[{"level":3,"title":"浏览器端","slug":"浏览器端","link":"#浏览器端","children":[]},{"level":3,"title":"node端","slug":"node端","link":"#node端","children":[]}]},{"level":2,"title":"axios防御XSRF攻击","slug":"axios防御xsrf攻击","link":"#axios防御xsrf攻击","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"frontend/axios.md","filePath":"frontend/axios.md"}');const o=s({name:"frontend/axios.md"},[["render",function(s,p,o,e,t,r){return l(),n("div",null,p[0]||(p[0]=[a('<h1 id="axios" tabindex="-1">axios <a class="header-anchor" href="#axios" aria-label="Permalink to &quot;axios&quot;">​</a></h1><h2 id="定位" tabindex="-1">定位 <a class="header-anchor" href="#定位" aria-label="Permalink to &quot;定位&quot;">​</a></h2><p>Promise based HTTP client for the browser and node.js 基于Promise的httpClient兼容浏览器和node</p><h2 id="特性" tabindex="-1">特性 <a class="header-anchor" href="#特性" aria-label="Permalink to &quot;特性&quot;">​</a></h2><ul><li>支持promise</li><li>同构代码（跨端） 浏览器上基于XMLHttpRequest node上基于http</li><li>请求响应拦截器(洋葱模型)</li><li>支持防XSRF攻击</li><li>取消请求</li></ul><p><img src="/assets/axios.Cg-YXp5V.png" alt="axios原型"></p><h2 id="洋葱模型" tabindex="-1">洋葱模型 <a class="header-anchor" href="#洋葱模型" aria-label="Permalink to &quot;洋葱模型&quot;">​</a></h2><p>请求拦截器 -&gt; 发请求 -&gt; 响应拦截器</p><p>注意请求拦截器和响应拦截器都是数组</p><h2 id="axios请求图片" tabindex="-1">axios请求图片 <a class="header-anchor" href="#axios请求图片" aria-label="Permalink to &quot;axios请求图片&quot;">​</a></h2><ul><li>要加上responseType: &#39;arraybuffer&#39;</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> axios.</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`https://api.weixin.qq.com/cgi-bin/wxaapp/createwxaqrcode?access_token=${</span><span style="color:#E1E4E8;">access_token</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#9ECBFF;">  &#39;path&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;page/index/index&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#9ECBFF;">  &#39;width&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">430</span></span>\n<span class="line"><span style="color:#E1E4E8;">}, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  responseType: </span><span style="color:#9ECBFF;">&#39;arraybuffer&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;content-type&#39;</span><span style="color:#E1E4E8;">,res.headers[</span><span style="color:#9ECBFF;">&#39;content-type&#39;</span><span style="color:#E1E4E8;">])</span></span>\n<span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(res.data)</span></span>\n<span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><h2 id="全部配置axios-defaults" tabindex="-1">全部配置axios.defaults <a class="header-anchor" href="#全部配置axios-defaults" aria-label="Permalink to &quot;全部配置axios.defaults&quot;">​</a></h2><ul><li>axios.defaults保存axios的全局配置</li><li>axios.get、post等方法会使用axios的全局配置</li><li>axios.create创建axios实例会使用全部配置 <img src="/assets/axios_config.D3pEG57X.png" alt="axios配置"></li><li>axios.default是为了在ts中兼容默认导入</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Allow use of default import syntax in TypeScript</span></span>\n<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> axios;</span></span></code></pre></div><h2 id="axios对象" tabindex="-1">axios对象 <a class="header-anchor" href="#axios对象" aria-label="Permalink to &quot;axios对象&quot;">​</a></h2><ul><li>axios对象不是Axios实例</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;"> * Create an instance of Axios</span></span>\n<span class="line"><span style="color:#6A737D;"> *</span></span>\n<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#B392F0;"> {Object}</span><span style="color:#E1E4E8;"> defaultConfig</span><span style="color:#6A737D;"> The default config for the instance</span></span>\n<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#B392F0;"> {Axios}</span><span style="color:#6A737D;"> A new instance of Axios</span></span>\n<span class="line"><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> createInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">defaultConfig</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Axios</span><span style="color:#E1E4E8;">(defaultConfig);</span></span>\n<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Axios</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.request, context);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // Copy axios.prototype to instance</span></span>\n<span class="line"><span style="color:#E1E4E8;">  utils.</span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">(instance, </span><span style="color:#79B8FF;">Axios</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">, context);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // Copy context to instance</span></span>\n<span class="line"><span style="color:#E1E4E8;">  utils.</span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">(instance, context);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> instance;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> axios </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> createInstance</span><span style="color:#E1E4E8;">(defaults);</span></span></code></pre></div><h2 id="axios适配器" tabindex="-1">axios适配器 <a class="header-anchor" href="#axios适配器" aria-label="Permalink to &quot;axios适配器&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 浏览器使用XMLHttpRequest node使用http</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> getDefaultAdapter</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> adapter;</span></span>\n<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> XMLHttpRequest </span><span style="color:#F97583;">!==</span><span style="color:#9ECBFF;"> &#39;undefined&#39;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">    // For browsers use XHR adapter</span></span>\n<span class="line"><span style="color:#E1E4E8;">    adapter </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./adapters/xhr&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> process </span><span style="color:#F97583;">!==</span><span style="color:#9ECBFF;"> &#39;undefined&#39;</span><span style="color:#F97583;"> &amp;&amp;</span><span style="color:#79B8FF;"> Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(process) </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;[object process]&#39;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">    // For node use HTTP adapter</span></span>\n<span class="line"><span style="color:#E1E4E8;">    adapter </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./adapters/http&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> adapter;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="axios方法" tabindex="-1">axios方法 <a class="header-anchor" href="#axios方法" aria-label="Permalink to &quot;axios方法&quot;">​</a></h2><ul><li>delete、get、head、options没有body参数</li><li>post、put、patch可以携带body参数</li><li>参考<a href="https://github.com/axios/axios/issues/3292" target="_blank" rel="noreferrer">axios.delete发body参数issue</a></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Provide aliases for supported request methods</span></span>\n<span class="line"><span style="color:#E1E4E8;">utils.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;delete&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;get&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;head&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;options&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> forEachMethodNoData</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">method</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">  /*eslint func-names:0*/</span></span>\n<span class="line"><span style="color:#79B8FF;">  Axios</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">[method] </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">mergeConfig</span><span style="color:#E1E4E8;">(config </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {}, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      method: method,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      url: url,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      data: (config </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {}).data</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }));</span></span>\n<span class="line"><span style="color:#E1E4E8;">  };</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">utils.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;post&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;put&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;patch&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> forEachMethodWithData</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">method</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">  /*eslint func-names:0*/</span></span>\n<span class="line"><span style="color:#79B8FF;">  Axios</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">[method] </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">mergeConfig</span><span style="color:#E1E4E8;">(config </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {}, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      method: method,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      url: url,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      data: data</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }));</span></span>\n<span class="line"><span style="color:#E1E4E8;">  };</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"><span style="color:#6A737D;">// axios delete发送body参数</span></span>\n<span class="line"><span style="color:#E1E4E8;">axios.</span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">({ method: </span><span style="color:#9ECBFF;">&#39;delete&#39;</span><span style="color:#E1E4E8;">, url, data })</span></span></code></pre></div><h2 id="核心函数" tabindex="-1">核心函数 <a class="header-anchor" href="#核心函数" aria-label="Permalink to &quot;核心函数&quot;">​</a></h2><h3 id="浏览器端" tabindex="-1">浏览器端 <a class="header-anchor" href="#浏览器端" aria-label="Permalink to &quot;浏览器端&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// XMLHttpRequest封装</span></span>\n<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> xhrAdapter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#F97583;"> new</span><span style="color:#79B8FF;"> Promise</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> dispatchXhrRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reject</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> requestData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.data;</span></span>\n<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> requestHeaders </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.headers;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (utils.</span><span style="color:#B392F0;">isFormData</span><span style="color:#E1E4E8;">(requestData)) {</span></span>\n<span class="line"><span style="color:#F97583;">      delete</span><span style="color:#E1E4E8;"> requestHeaders[</span><span style="color:#9ECBFF;">&#39;Content-Type&#39;</span><span style="color:#E1E4E8;">]; </span><span style="color:#6A737D;">// Let the browser set it</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> request </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> XMLHttpRequest</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // HTTP basic authentication</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (config.auth) {</span></span>\n<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.auth.username </span><span style="color:#F97583;">||</span><span style="color:#9ECBFF;"> &#39;&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> password </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.auth.password </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> unescape</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">encodeURIComponent</span><span style="color:#E1E4E8;">(config.auth.password)) </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> &#39;&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      requestHeaders.Authorization </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;Basic &#39;</span><span style="color:#F97583;"> +</span><span style="color:#B392F0;"> btoa</span><span style="color:#E1E4E8;">(username </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &#39;:&#39;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> password);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> fullPath </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> buildFullPath</span><span style="color:#E1E4E8;">(config.baseURL, config.url);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    request.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(config.method.</span><span style="color:#B392F0;">toUpperCase</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">buildURL</span><span style="color:#E1E4E8;">(fullPath, config.params, config.paramsSerializer), </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // Set the request timeout in MS</span></span>\n<span class="line"><span style="color:#E1E4E8;">    request.timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.timeout;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // Listen for ready state</span></span>\n<span class="line"><span style="color:#E1E4E8;">    request.</span><span style="color:#B392F0;">onreadystatechange</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> handleLoad</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">request </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> request.readyState </span><span style="color:#F97583;">!==</span><span style="color:#79B8FF;"> 4</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">      // The request errored out and we didn&#39;t get a response, this will be</span></span>\n<span class="line"><span style="color:#6A737D;">      // handled by onerror instead</span></span>\n<span class="line"><span style="color:#6A737D;">      // With one exception: request that using file: protocol, most browsers</span></span>\n<span class="line"><span style="color:#6A737D;">      // will return status as 0 even though it&#39;s a successful request</span></span>\n<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (request.status </span><span style="color:#F97583;">===</span><span style="color:#79B8FF;"> 0</span><span style="color:#F97583;"> &amp;&amp;</span><span style="color:#F97583;"> !</span><span style="color:#E1E4E8;">(request.responseURL </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> request.responseURL.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;file:&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">===</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">)) {</span></span>\n<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">      // Prepare the response</span></span>\n<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> responseHeaders </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;getAllResponseHeaders&#39;</span><span style="color:#F97583;"> in</span><span style="color:#E1E4E8;"> request </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> parseHeaders</span><span style="color:#E1E4E8;">(request.</span><span style="color:#B392F0;">getAllResponseHeaders</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> responseData </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> !</span><span style="color:#E1E4E8;">config.responseType </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> config.responseType </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;text&#39;</span><span style="color:#F97583;"> ?</span><span style="color:#E1E4E8;"> request.responseText </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> request.response;</span></span>\n<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        data: responseData,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        status: request.status,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        statusText: request.statusText,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        headers: responseHeaders,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        config: config,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        request: request</span></span>\n<span class="line"><span style="color:#E1E4E8;">      };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">      settle</span><span style="color:#E1E4E8;">(resolve, reject, response);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">      // Clean up request</span></span>\n<span class="line"><span style="color:#E1E4E8;">      request </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // Handle browser request cancellation (as opposed to a manual cancellation)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    request.</span><span style="color:#B392F0;">onabort</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> handleAbort</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">request) {</span></span>\n<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">      reject</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">createError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Request aborted&#39;</span><span style="color:#E1E4E8;">, config, </span><span style="color:#9ECBFF;">&#39;ECONNABORTED&#39;</span><span style="color:#E1E4E8;">, request));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">      // Clean up request</span></span>\n<span class="line"><span style="color:#E1E4E8;">      request </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // Handle low level network errors</span></span>\n<span class="line"><span style="color:#E1E4E8;">    request.</span><span style="color:#B392F0;">onerror</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> handleError</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#6A737D;">      // Real errors are hidden from us by the browser</span></span>\n<span class="line"><span style="color:#6A737D;">      // onerror should only fire if it&#39;s a network error</span></span>\n<span class="line"><span style="color:#B392F0;">      reject</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">createError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Network Error&#39;</span><span style="color:#E1E4E8;">, config, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, request));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">      // Clean up request</span></span>\n<span class="line"><span style="color:#E1E4E8;">      request </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // Handle timeout</span></span>\n<span class="line"><span style="color:#E1E4E8;">    request.</span><span style="color:#B392F0;">ontimeout</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> handleTimeout</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> timeoutErrorMessage </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;timeout of &#39;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> config.timeout </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &#39;ms exceeded&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (config.timeoutErrorMessage) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        timeoutErrorMessage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.timeoutErrorMessage;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#B392F0;">      reject</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">createError</span><span style="color:#E1E4E8;">(timeoutErrorMessage, config, </span><span style="color:#9ECBFF;">&#39;ECONNABORTED&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        request));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">      // Clean up request</span></span>\n<span class="line"><span style="color:#E1E4E8;">      request </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // Add xsrf header</span></span>\n<span class="line"><span style="color:#6A737D;">    // This is only done if running in a standard browser environment.</span></span>\n<span class="line"><span style="color:#6A737D;">    // Specifically not if we&#39;re in a web worker, or react-native.</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (utils.</span><span style="color:#B392F0;">isStandardBrowserEnv</span><span style="color:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="color:#6A737D;">      // Add xsrf header</span></span>\n<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> xsrfValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (config.withCredentials </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> isURLSameOrigin</span><span style="color:#E1E4E8;">(fullPath)) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> config.xsrfCookieName </span><span style="color:#F97583;">?</span></span>\n<span class="line"><span style="color:#E1E4E8;">        cookies.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(config.xsrfCookieName) </span><span style="color:#F97583;">:</span></span>\n<span class="line"><span style="color:#79B8FF;">        undefined</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (xsrfValue) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        requestHeaders[config.xsrfHeaderName] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> xsrfValue;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // Add headers to the request</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;setRequestHeader&#39;</span><span style="color:#F97583;"> in</span><span style="color:#E1E4E8;"> request) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      utils.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(requestHeaders, </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> setRequestHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> requestData </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;undefined&#39;</span><span style="color:#F97583;"> &amp;&amp;</span><span style="color:#E1E4E8;"> key.</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;content-type&#39;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">          // Remove Content-Type if data is undefined</span></span>\n<span class="line"><span style="color:#F97583;">          delete</span><span style="color:#E1E4E8;"> requestHeaders[key];</span></span>\n<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">          // Otherwise add header to the request</span></span>\n<span class="line"><span style="color:#E1E4E8;">          request.</span><span style="color:#B392F0;">setRequestHeader</span><span style="color:#E1E4E8;">(key, val);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      });</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // Add withCredentials to request if needed</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">utils.</span><span style="color:#B392F0;">isUndefined</span><span style="color:#E1E4E8;">(config.withCredentials)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      request.withCredentials </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> !!</span><span style="color:#E1E4E8;">config.withCredentials;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // Add responseType to request if needed</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (config.responseType) {</span></span>\n<span class="line"><span style="color:#F97583;">      try</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        request.responseType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.responseType;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (e) {</span></span>\n<span class="line"><span style="color:#6A737D;">        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.</span></span>\n<span class="line"><span style="color:#6A737D;">        // But, this can be suppressed for &#39;json&#39; type as it can be parsed by default &#39;transformResponse&#39; function.</span></span>\n<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (config.responseType </span><span style="color:#F97583;">!==</span><span style="color:#9ECBFF;"> &#39;json&#39;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">          throw</span><span style="color:#E1E4E8;"> e;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // Handle progress if needed</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> config.onDownloadProgress </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;function&#39;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      request.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;progress&#39;</span><span style="color:#E1E4E8;">, config.onDownloadProgress);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // Not all browsers support upload events</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> config.onUploadProgress </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;function&#39;</span><span style="color:#F97583;"> &amp;&amp;</span><span style="color:#E1E4E8;"> request.upload) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      request.upload.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;progress&#39;</span><span style="color:#E1E4E8;">, config.onUploadProgress);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (config.cancelToken) {</span></span>\n<span class="line"><span style="color:#6A737D;">      // Handle cancellation</span></span>\n<span class="line"><span style="color:#E1E4E8;">      config.cancelToken.promise.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onCanceled</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">cancel</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">request) {</span></span>\n<span class="line"><span style="color:#F97583;">          return</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        request.</span><span style="color:#B392F0;">abort</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#B392F0;">        reject</span><span style="color:#E1E4E8;">(cancel);</span></span>\n<span class="line"><span style="color:#6A737D;">        // Clean up request</span></span>\n<span class="line"><span style="color:#E1E4E8;">        request </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      });</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">requestData) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      requestData </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // Send the request</span></span>\n<span class="line"><span style="color:#E1E4E8;">    request.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(requestData);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  });</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h3 id="node端" tabindex="-1">node端 <a class="header-anchor" href="#node端" aria-label="Permalink to &quot;node端&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">//http封装</span></span>\n<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> httpAdapter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#F97583;"> new</span><span style="color:#79B8FF;"> Promise</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> dispatchHttpRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">resolvePromise</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">rejectPromise</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">    var</span><span style="color:#B392F0;"> resolve</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#B392F0;">      resolvePromise</span><span style="color:#E1E4E8;">(value);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"><span style="color:#F97583;">    var</span><span style="color:#B392F0;"> reject</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> reject</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#B392F0;">      rejectPromise</span><span style="color:#E1E4E8;">(value);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.data;</span></span>\n<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> headers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.headers;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // Set User-Agent (required by some servers)</span></span>\n<span class="line"><span style="color:#6A737D;">    // Only set header if it hasn&#39;t been set in config</span></span>\n<span class="line"><span style="color:#6A737D;">    // See https://github.com/axios/axios/issues/69</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">headers[</span><span style="color:#9ECBFF;">&#39;User-Agent&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#F97583;"> !</span><span style="color:#E1E4E8;">headers[</span><span style="color:#9ECBFF;">&#39;user-agent&#39;</span><span style="color:#E1E4E8;">]) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      headers[</span><span style="color:#9ECBFF;">&#39;User-Agent&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;axios/&#39;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> pkg.version;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (data </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#F97583;"> !</span><span style="color:#E1E4E8;">utils.</span><span style="color:#B392F0;">isStream</span><span style="color:#E1E4E8;">(data)) {</span></span>\n<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (Buffer.</span><span style="color:#B392F0;">isBuffer</span><span style="color:#E1E4E8;">(data)) {</span></span>\n<span class="line"><span style="color:#6A737D;">        // Nothing to do...</span></span>\n<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;"> (utils.</span><span style="color:#B392F0;">isArrayBuffer</span><span style="color:#E1E4E8;">(data)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Buffer.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Uint8Array</span><span style="color:#E1E4E8;">(data));</span></span>\n<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;"> (utils.</span><span style="color:#B392F0;">isString</span><span style="color:#E1E4E8;">(data)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Buffer.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(data, </span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">        return</span><span style="color:#B392F0;"> reject</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">createError</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#9ECBFF;">          &#39;Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          config</span></span>\n<span class="line"><span style="color:#E1E4E8;">        ));</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">      // Add Content-Length header if data exists</span></span>\n<span class="line"><span style="color:#E1E4E8;">      headers[</span><span style="color:#9ECBFF;">&#39;Content-Length&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // HTTP basic authentication</span></span>\n<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> auth </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> undefined</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (config.auth) {</span></span>\n<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.auth.username </span><span style="color:#F97583;">||</span><span style="color:#9ECBFF;"> &#39;&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> password </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.auth.password </span><span style="color:#F97583;">||</span><span style="color:#9ECBFF;"> &#39;&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      auth </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> username </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &#39;:&#39;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> password;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // Parse url</span></span>\n<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> fullPath </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> buildFullPath</span><span style="color:#E1E4E8;">(config.baseURL, config.url);</span></span>\n<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> parsed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(fullPath);</span></span>\n<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> protocol </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parsed.protocol </span><span style="color:#F97583;">||</span><span style="color:#9ECBFF;"> &#39;http:&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">auth </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> parsed.auth) {</span></span>\n<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> urlAuth </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parsed.auth.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;:&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> urlUsername </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> urlAuth[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#9ECBFF;"> &#39;&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> urlPassword </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> urlAuth[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#9ECBFF;"> &#39;&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      auth </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> urlUsername </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &#39;:&#39;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> urlPassword;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (auth) {</span></span>\n<span class="line"><span style="color:#F97583;">      delete</span><span style="color:#E1E4E8;"> headers.Authorization;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> isHttpsRequest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isHttps.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(protocol);</span></span>\n<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> agent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isHttpsRequest </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> config.httpsAgent </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> config.httpAgent;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      path: </span><span style="color:#B392F0;">buildURL</span><span style="color:#E1E4E8;">(parsed.path, config.params, config.paramsSerializer).</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#85E89D;font-weight:bold;">\\?</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      method: config.method.</span><span style="color:#B392F0;">toUpperCase</span><span style="color:#E1E4E8;">(),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      headers: headers,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      agent: agent,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      agents: { http: config.httpAgent, https: config.httpsAgent },</span></span>\n<span class="line"><span style="color:#E1E4E8;">      auth: auth</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (config.socketPath) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      options.socketPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.socketPath;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      options.hostname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parsed.hostname;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      options.port </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parsed.port;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> proxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.proxy;</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">proxy </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> proxy </span><span style="color:#F97583;">!==</span><span style="color:#79B8FF;"> false</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> proxyEnv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> protocol.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &#39;_proxy&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> proxyUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> process.env[proxyEnv] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> process.env[proxyEnv.</span><span style="color:#B392F0;">toUpperCase</span><span style="color:#E1E4E8;">()];</span></span>\n<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (proxyUrl) {</span></span>\n<span class="line"><span style="color:#F97583;">        var</span><span style="color:#E1E4E8;"> parsedProxyUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(proxyUrl);</span></span>\n<span class="line"><span style="color:#F97583;">        var</span><span style="color:#E1E4E8;"> noProxyEnv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> process.env.no_proxy </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> process.env.</span><span style="color:#79B8FF;">NO_PROXY</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">        var</span><span style="color:#E1E4E8;"> shouldProxy </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (noProxyEnv) {</span></span>\n<span class="line"><span style="color:#F97583;">          var</span><span style="color:#E1E4E8;"> noProxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> noProxyEnv.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> trim</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">            return</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">          });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">          shouldProxy </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> !</span><span style="color:#E1E4E8;">noProxy.</span><span style="color:#B392F0;">some</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> proxyMatch</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">proxyElement</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">            if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">proxyElement) {</span></span>\n<span class="line"><span style="color:#F97583;">              return</span><span style="color:#79B8FF;"> false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">            }</span></span>\n<span class="line"><span style="color:#F97583;">            if</span><span style="color:#E1E4E8;"> (proxyElement </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;*&#39;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">              return</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">            }</span></span>\n<span class="line"><span style="color:#F97583;">            if</span><span style="color:#E1E4E8;"> (proxyElement[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;.&#39;</span><span style="color:#F97583;"> &amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">                parsed.hostname.</span><span style="color:#B392F0;">substr</span><span style="color:#E1E4E8;">(parsed.hostname.</span><span style="color:#79B8FF;">length</span><span style="color:#F97583;"> -</span><span style="color:#E1E4E8;"> proxyElement.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> proxyElement) {</span></span>\n<span class="line"><span style="color:#F97583;">              return</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">            }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">            return</span><span style="color:#E1E4E8;"> parsed.hostname </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> proxyElement;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          });</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (shouldProxy) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          proxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            host: parsedProxyUrl.hostname,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            port: parsedProxyUrl.port,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            protocol: parsedProxyUrl.protocol</span></span>\n<span class="line"><span style="color:#E1E4E8;">          };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">          if</span><span style="color:#E1E4E8;"> (parsedProxyUrl.auth) {</span></span>\n<span class="line"><span style="color:#F97583;">            var</span><span style="color:#E1E4E8;"> proxyUrlAuth </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parsedProxyUrl.auth.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;:&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">            proxy.auth </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">              username: proxyUrlAuth[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">              password: proxyUrlAuth[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"><span style="color:#E1E4E8;">            };</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (proxy) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      options.headers.host </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parsed.hostname </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (parsed.port </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> &#39;:&#39;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> parsed.port </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> &#39;&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#B392F0;">      setProxy</span><span style="color:#E1E4E8;">(options, proxy, protocol </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &#39;//&#39;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> parsed.hostname </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (parsed.port </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> &#39;:&#39;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> parsed.port </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> &#39;&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> options.path);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> transport;</span></span>\n<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> isHttpsProxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isHttpsRequest </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (proxy </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> isHttps.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(proxy.protocol) </span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (config.transport) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      transport </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.transport;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;"> (config.maxRedirects </span><span style="color:#F97583;">===</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      transport </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isHttpsProxy </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> https </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> http;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (config.maxRedirects) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        options.maxRedirects </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.maxRedirects;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      transport </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isHttpsProxy </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> httpsFollow </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> httpFollow;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (config.maxBodyLength </span><span style="color:#F97583;">&gt;</span><span style="color:#F97583;"> -</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      options.maxBodyLength </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.maxBodyLength;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // Create the request</span></span>\n<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> req </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> transport.</span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(options, </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> handleResponse</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (req.aborted) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">      // uncompress the response body transparently if required</span></span>\n<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> stream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> res;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">      // return the last request in case of redirects</span></span>\n<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> lastRequest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> res.req </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> req;</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">      // if no content, is HEAD request or decompress disabled we should not decompress</span></span>\n<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (res.statusCode </span><span style="color:#F97583;">!==</span><span style="color:#79B8FF;"> 204</span><span style="color:#F97583;"> &amp;&amp;</span><span style="color:#E1E4E8;"> lastRequest.method </span><span style="color:#F97583;">!==</span><span style="color:#9ECBFF;"> &#39;HEAD&#39;</span><span style="color:#F97583;"> &amp;&amp;</span><span style="color:#E1E4E8;"> config.decompress </span><span style="color:#F97583;">!==</span><span style="color:#79B8FF;"> false</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">        switch</span><span style="color:#E1E4E8;"> (res.headers[</span><span style="color:#9ECBFF;">&#39;content-encoding&#39;</span><span style="color:#E1E4E8;">]) {</span></span>\n<span class="line"><span style="color:#6A737D;">        /*eslint default-case:0*/</span></span>\n<span class="line"><span style="color:#F97583;">        case</span><span style="color:#9ECBFF;"> &#39;gzip&#39;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#F97583;">        case</span><span style="color:#9ECBFF;"> &#39;compress&#39;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#F97583;">        case</span><span style="color:#9ECBFF;"> &#39;deflate&#39;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#6A737D;">        // add the unzipper to the body stream processing pipeline</span></span>\n<span class="line"><span style="color:#E1E4E8;">          stream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stream.</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(zlib.</span><span style="color:#B392F0;">createUnzip</span><span style="color:#E1E4E8;">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">          // remove the content-encoding in order to not confuse downstream operations</span></span>\n<span class="line"><span style="color:#F97583;">          delete</span><span style="color:#E1E4E8;"> res.headers[</span><span style="color:#9ECBFF;">&#39;content-encoding&#39;</span><span style="color:#E1E4E8;">];</span></span>\n<span class="line"><span style="color:#F97583;">          break</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        status: res.statusCode,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        statusText: res.statusMessage,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        headers: res.headers,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        config: config,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        request: lastRequest</span></span>\n<span class="line"><span style="color:#E1E4E8;">      };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (config.responseType </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;stream&#39;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        response.data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stream;</span></span>\n<span class="line"><span style="color:#B392F0;">        settle</span><span style="color:#E1E4E8;">(resolve, reject, response);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">        var</span><span style="color:#E1E4E8;"> responseBuffer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#E1E4E8;">        stream.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> handleStreamData</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          responseBuffer.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(chunk);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">          // make sure the content length is not over the maxContentLength if specified</span></span>\n<span class="line"><span style="color:#F97583;">          if</span><span style="color:#E1E4E8;"> (config.maxContentLength </span><span style="color:#F97583;">&gt;</span><span style="color:#F97583;"> -</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;"> &amp;&amp;</span><span style="color:#E1E4E8;"> Buffer.</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(responseBuffer).</span><span style="color:#79B8FF;">length</span><span style="color:#F97583;"> &gt;</span><span style="color:#E1E4E8;"> config.maxContentLength) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            stream.</span><span style="color:#B392F0;">destroy</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#B392F0;">            reject</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">createError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;maxContentLength size of &#39;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> config.maxContentLength </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &#39; exceeded&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">              config, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, lastRequest));</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        stream.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> handleStreamError</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">          if</span><span style="color:#E1E4E8;"> (req.aborted) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#B392F0;">          reject</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">enhanceError</span><span style="color:#E1E4E8;">(err, config, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, lastRequest));</span></span>\n<span class="line"><span style="color:#E1E4E8;">        });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        stream.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;end&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> handleStreamEnd</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">          var</span><span style="color:#E1E4E8;"> responseData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Buffer.</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(responseBuffer);</span></span>\n<span class="line"><span style="color:#F97583;">          if</span><span style="color:#E1E4E8;"> (config.responseType </span><span style="color:#F97583;">!==</span><span style="color:#9ECBFF;"> &#39;arraybuffer&#39;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            responseData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> responseData.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(config.responseEncoding);</span></span>\n<span class="line"><span style="color:#F97583;">            if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">config.responseEncoding </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> config.responseEncoding </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;utf8&#39;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">              responseData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> utils.</span><span style="color:#B392F0;">stripBOM</span><span style="color:#E1E4E8;">(responseData);</span></span>\n<span class="line"><span style="color:#E1E4E8;">            }</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">          response.data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> responseData;</span></span>\n<span class="line"><span style="color:#B392F0;">          settle</span><span style="color:#E1E4E8;">(resolve, reject, response);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        });</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // Handle errors</span></span>\n<span class="line"><span style="color:#E1E4E8;">    req.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> handleRequestError</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (req.aborted </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> err.code </span><span style="color:#F97583;">!==</span><span style="color:#9ECBFF;"> &#39;ERR_FR_TOO_MANY_REDIRECTS&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#B392F0;">      reject</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">enhanceError</span><span style="color:#E1E4E8;">(err, config, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, req));</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // Handle request timeout</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (config.timeout) {</span></span>\n<span class="line"><span style="color:#6A737D;">      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.</span></span>\n<span class="line"><span style="color:#6A737D;">      // And timer callback will be fired, and abort() will be invoked before connection, then get &quot;socket hang up&quot; and code ECONNRESET.</span></span>\n<span class="line"><span style="color:#6A737D;">      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.</span></span>\n<span class="line"><span style="color:#6A737D;">      // And then these socket which be hang up will devoring CPU little by little.</span></span>\n<span class="line"><span style="color:#6A737D;">      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.</span></span>\n<span class="line"><span style="color:#E1E4E8;">      req.</span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(config.timeout, </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> handleRequestTimeout</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        req.</span><span style="color:#B392F0;">abort</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#B392F0;">        reject</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">createError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;timeout of &#39;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> config.timeout </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &#39;ms exceeded&#39;</span><span style="color:#E1E4E8;">, config, </span><span style="color:#9ECBFF;">&#39;ECONNABORTED&#39;</span><span style="color:#E1E4E8;">, req));</span></span>\n<span class="line"><span style="color:#E1E4E8;">      });</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (config.cancelToken) {</span></span>\n<span class="line"><span style="color:#6A737D;">      // Handle cancellation</span></span>\n<span class="line"><span style="color:#E1E4E8;">      config.cancelToken.promise.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onCanceled</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">cancel</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (req.aborted) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        req.</span><span style="color:#B392F0;">abort</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#B392F0;">        reject</span><span style="color:#E1E4E8;">(cancel);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      });</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // Send the request</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (utils.</span><span style="color:#B392F0;">isStream</span><span style="color:#E1E4E8;">(data)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      data.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> handleStreamError</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#B392F0;">        reject</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">enhanceError</span><span style="color:#E1E4E8;">(err, config, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, req));</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }).</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(req);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      req.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(data);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  });</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h2 id="axios防御xsrf攻击" tabindex="-1">axios防御XSRF攻击 <a class="header-anchor" href="#axios防御xsrf攻击" aria-label="Permalink to &quot;axios防御XSRF攻击&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    xsrfCookieName: </span><span style="color:#9ECBFF;">&#39;XSRF-TOKEN&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    xsrfHeaderName: </span><span style="color:#9ECBFF;">&#39;X-XSRF-TOKEN&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (utils.</span><span style="color:#B392F0;">isStandardBrowserEnv</span><span style="color:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="color:#6A737D;">  // Add xsrf header</span></span>\n<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> xsrfValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (config.withCredentials </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> isURLSameOrigin</span><span style="color:#E1E4E8;">(fullPath)) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> config.xsrfCookieName </span><span style="color:#F97583;">?</span></span>\n<span class="line"><span style="color:#E1E4E8;">    cookies.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(config.xsrfCookieName) </span><span style="color:#F97583;">:</span></span>\n<span class="line"><span style="color:#79B8FF;">    undefined</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (xsrfValue) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    requestHeaders[config.xsrfHeaderName] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> xsrfValue;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://jquery.com/" target="_blank" rel="noreferrer">jquery官网</a></li><li><a href="https://github.com/axios/axios" target="_blank" rel="noreferrer">axios github</a></li></ul>',32)]))}]]);export{p as __pageData,o as default};
