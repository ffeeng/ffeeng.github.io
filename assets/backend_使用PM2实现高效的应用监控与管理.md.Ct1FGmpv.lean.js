import{_ as s,c as a,b as n,o as l}from"./chunks/framework.CUf7xJpa.js";const o=JSON.parse('{"title":"使用PM2实现高效的应用监控与管理","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. pm2","slug":"_1-pm2","link":"#_1-pm2","children":[]},{"level":2,"title":"2. 诞生背景","slug":"_2-诞生背景","link":"#_2-诞生背景","children":[]},{"level":2,"title":"2. 安装","slug":"_2-安装","link":"#_2-安装","children":[]},{"level":2,"title":"3. 常用命令","slug":"_3-常用命令","link":"#_3-常用命令","children":[]},{"level":2,"title":"4. 配置文件","slug":"_4-配置文件","link":"#_4-配置文件","children":[{"level":3,"title":"基本结构","slug":"基本结构","link":"#基本结构","children":[]},{"level":3,"title":"主要字段解释","slug":"主要字段解释","link":"#主要字段解释","children":[]},{"level":3,"title":"使用配置文件","slug":"使用配置文件","link":"#使用配置文件","children":[]}]},{"level":2,"title":"5. CLI 实现配置文件效果","slug":"_5-cli-实现配置文件效果","link":"#_5-cli-实现配置文件效果","children":[]},{"level":2,"title":"6. 监控","slug":"_6-监控","link":"#_6-监控","children":[{"level":3,"title":"使用 PM2监控命令行工具","slug":"使用-pm2监控命令行工具","link":"#使用-pm2监控命令行工具","children":[]},{"level":3,"title":"使用 PM2 Web 界面","slug":"使用-pm2-web-界面","link":"#使用-pm2-web-界面","children":[]},{"level":3,"title":"自定义指标","slug":"自定义指标","link":"#自定义指标","children":[]}]},{"level":2,"title":"7. 其它","slug":"_7-其它","link":"#_7-其它","children":[{"level":3,"title":"7.1 负载均衡下的会话管理","slug":"_7-1-负载均衡下的会话管理","link":"#_7-1-负载均衡下的会话管理","children":[]},{"level":3,"title":"7.2 异常重启处理","slug":"_7-2-异常重启处理","link":"#_7-2-异常重启处理","children":[]},{"level":3,"title":"7.3 SIGINT 信号超时处理","slug":"_7-3-sigint-信号超时处理","link":"#_7-3-sigint-信号超时处理","children":[]}]}],"relativePath":"backend/使用PM2实现高效的应用监控与管理.md","filePath":"backend/使用PM2实现高效的应用监控与管理.md"}');const p=s({name:"backend/使用PM2实现高效的应用监控与管理.md"},[["render",function(s,o,p,e,t,c){return l(),a("div",null,o[0]||(o[0]=[n('<h1 id="使用pm2实现高效的应用监控与管理" tabindex="-1">使用PM2实现高效的应用监控与管理 <a class="header-anchor" href="#使用pm2实现高效的应用监控与管理" aria-label="Permalink to &quot;使用PM2实现高效的应用监控与管理&quot;">​</a></h1><p><img src="https://github.com/lecepin/blog/assets/11046969/8949797a-6f32-439b-a35b-7abd3677c6d4" alt="image"></p><h2 id="_1-pm2" tabindex="-1">1. pm2 <a class="header-anchor" href="#_1-pm2" aria-label="Permalink to &quot;1. pm2&quot;">​</a></h2><p>PM2 是一个流行的进程管理器，用于 Node.js 应用程序。它支持应用程序的负载均衡、自动重启、日志管理、监控以及多环境管理等功能。PM2让开发者能够以守护进程的方式运行和管理 Node.js 应用，即使在应用崩溃或服务器重启后也能自动重启应用。这使得 PM2非常适合在生产环境中部署 Node.js 应用。除此之外，PM2还支持应用的零停机更新，以及对 Docker 容器的支持。</p><h2 id="_2-诞生背景" tabindex="-1">2. 诞生背景 <a class="header-anchor" href="#_2-诞生背景" aria-label="Permalink to &quot;2. 诞生背景&quot;">​</a></h2><p>PM2 的诞生背景主要是为了解决 Node.js 应用程序在生产环境中的运维问题。在 PM2出现之前，Node.js 开发者经常面临如何有效管理和维持应用稳定运行的挑战，特别是在应对应用崩溃、服务器重启或是负载均衡等方面。</p><p>PM2的主要目标是提供一个简单而强大的工具，帮助开发者和系统管理员在生产环境中管理和维护 Node.js 应用。它解决的关键问题包括：</p><ol><li><strong>自动重启</strong>: 如果 Node.js 应用崩溃或由于某种原因停止，PM2可以自动重启应用，确保服务的持续可用性。</li><li><strong>负载均衡</strong>: PM2支持集群模式，能够启动多个应用实例，并在它们之间自动分配负载，提高应用的可伸缩性和可用性。</li><li><strong>无停机更新</strong>: PM2允许开发者在不停止当前服务的情况下，更新 Node.js 应用到新的版本，这对于需要24/7运行的服务来说非常重要。</li><li><strong>日志管理</strong>: PM2提供了日志管理的功能，使得跟踪和调试生产环境中的应用更为便捷。</li><li><strong>监控</strong>: PM2包含了一个监控系统，可以实时查看应用的 CPU 和内存使用情况，帮助开发者优化应用性能。</li></ol><h2 id="_2-安装" tabindex="-1">2. 安装 <a class="header-anchor" href="#_2-安装" aria-label="Permalink to &quot;2. 安装&quot;">​</a></h2><p>执行以下命令来全局安装 PM2。全局安装意味着你可以在任何地方运行 PM2命令。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#9ECBFF;"> install</span><span style="color:#9ECBFF;"> pm2</span><span style="color:#79B8FF;"> -g</span></span></code></pre></div><p>这条命令会将 PM2安装到你的系统上，<code>-g</code> 参数表示全局安装，这样你就可以在任何目录下使用 PM2命令。</p><p>安装完成后，你可以运行以下命令来检查 PM2是否正确安装：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">pm2</span><span style="color:#79B8FF;"> --version</span></span></code></pre></div><h2 id="_3-常用命令" tabindex="-1">3. 常用命令 <a class="header-anchor" href="#_3-常用命令" aria-label="Permalink to &quot;3. 常用命令&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>描述</th><th>使用示例及参数</th></tr></thead><tbody><tr><td><code>start</code></td><td>启动应用</td><td><code>pm2 start app.js</code><br><code>pm2 start app.js -i 4 --name myApp</code><br><code>pm2 start app.js --watch</code></td></tr><tr><td><code>stop</code></td><td>停止应用</td><td><code>pm2 stop app.js</code><br><code>pm2 stop 0</code><br><code>pm2 stop all</code></td></tr><tr><td><code>restart</code></td><td>重启应用</td><td><code>pm2 restart app.js</code><br><code>pm2 restart all</code></td></tr><tr><td><code>delete</code></td><td>删除应用</td><td><code>pm2 delete app.js</code><br><code>pm2 delete 0</code><br><code>pm2 delete all</code></td></tr><tr><td><code>list</code></td><td>列出所有应用</td><td><code>pm2 list</code></td></tr><tr><td><code>monit</code></td><td>监控应用</td><td><code>pm2 monit</code></td></tr><tr><td><code>logs</code></td><td>查看应用日志</td><td><code>pm2 logs</code><br><code>pm2 logs app.js</code><br><code>pm2 logs --lines 100</code></td></tr><tr><td><code>save</code></td><td>保存当前应用列表</td><td><code>pm2 save</code></td></tr><tr><td><code>reload</code></td><td>重载应用</td><td><code>pm2 reload app.js</code><br><code>pm2 reload all</code></td></tr><tr><td><code>scale</code></td><td>调整集群模式下的实例数量</td><td><code>pm2 scale app +1</code><br><code>pm2 scale app 4</code></td></tr><tr><td><code>describe</code></td><td>查看应用详细信息</td><td><code>pm2 describe 0</code></td></tr><tr><td><code>update</code></td><td>更新 PM2守护进程</td><td><code>pm2 update</code></td></tr><tr><td><code>status</code></td><td>查看应用状态</td><td><code>pm2 status</code></td></tr><tr><td><code>flush</code></td><td>清空所有日志文件</td><td><code>pm2 flush</code></td></tr><tr><td><code>startup</code></td><td>创建开机自启动脚本</td><td><code>pm2 startup</code></td></tr><tr><td><code>unstartup</code></td><td>删除开机自启动脚本</td><td><code>pm2 unstartup</code></td></tr></tbody></table><h2 id="_4-配置文件" tabindex="-1">4. 配置文件 <a class="header-anchor" href="#_4-配置文件" aria-label="Permalink to &quot;4. 配置文件&quot;">​</a></h2><p>PM2的配置文件通常被称为<code>ecosystem.config.js</code>，这是一个 JavaScript 文件，允许你配置和管理应用程序的多个方面。通过使用配置文件，你可以轻松地指定环境变量、日志文件路径、实例数量等，并且可以一次性启动多个应用。下面详细介绍如何使用 PM2配置文件。</p><h3 id="基本结构" tabindex="-1">基本结构 <a class="header-anchor" href="#基本结构" aria-label="Permalink to &quot;基本结构&quot;">​</a></h3><p>PM2的<code>ecosystem.config.js</code>文件基本结构如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  apps: [</span></span>\n<span class="line"><span style="color:#E1E4E8;">    {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#9ECBFF;">&quot;app1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 应用程序名称</span></span>\n<span class="line"><span style="color:#E1E4E8;">      script: </span><span style="color:#9ECBFF;">&quot;./app.js&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 主脚本路径</span></span>\n<span class="line"><span style="color:#E1E4E8;">      args: </span><span style="color:#9ECBFF;">&quot;arg1 arg2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 传递给脚本的参数</span></span>\n<span class="line"><span style="color:#E1E4E8;">      instances: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 应用实例数</span></span>\n<span class="line"><span style="color:#E1E4E8;">      autorestart: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 自动重启</span></span>\n<span class="line"><span style="color:#E1E4E8;">      watch: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 监控文件变动</span></span>\n<span class="line"><span style="color:#E1E4E8;">      max_memory_restart: </span><span style="color:#9ECBFF;">&quot;1G&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 内存超过1G 重启</span></span>\n<span class="line"><span style="color:#E1E4E8;">      env: {</span></span>\n<span class="line"><span style="color:#6A737D;">        // 环境变量</span></span>\n<span class="line"><span style="color:#E1E4E8;">        NODE_ENV: </span><span style="color:#9ECBFF;">&quot;development&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      },</span></span>\n<span class="line"><span style="color:#E1E4E8;">      env_production: {</span></span>\n<span class="line"><span style="color:#6A737D;">        // 生产环境变量</span></span>\n<span class="line"><span style="color:#E1E4E8;">        NODE_ENV: </span><span style="color:#9ECBFF;">&quot;production&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#9ECBFF;">&quot;app2&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      script: </span><span style="color:#9ECBFF;">&quot;./app2.js&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#6A737D;">      // 其他配置...</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  ],</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h3 id="主要字段解释" tabindex="-1">主要字段解释 <a class="header-anchor" href="#主要字段解释" aria-label="Permalink to &quot;主要字段解释&quot;">​</a></h3><ul><li><strong>apps</strong>: 一个数组，包含了你要运行的应用的配置对象。</li><li><strong>name</strong>: 应用程序的名称。</li><li><strong>script</strong>: 应用程序的启动脚本或文件。</li><li><strong>args</strong>: 传递给脚本的参数。</li><li><strong>instances</strong>: 启动应用实例的数量。对于无状态的应用，可以设置为<code>max</code>以根据 CPU 核心数量来启动最大实例数。</li><li><strong>autorestart</strong>: 如果应用崩溃或者停止，是否自动重启。</li><li><strong>watch</strong>: 是否启用文件监控和自动重启。</li><li><strong>max_memory_restart</strong>: 当应用超过指定内存量时自动重启。</li><li><strong>env</strong>: 在这个对象中，你可以指定传递给应用的环境变量。这些环境变量在所有环境下都会加载。</li><li><strong>env_production</strong>, <strong>env_development</strong>: 你可以为不同的环境指定不同的环境变量。</li></ul><h3 id="使用配置文件" tabindex="-1">使用配置文件 <a class="header-anchor" href="#使用配置文件" aria-label="Permalink to &quot;使用配置文件&quot;">​</a></h3><ol><li><p><strong>启动应用</strong>: 使用配置文件启动应用时，运行如下命令：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">pm2</span><span style="color:#9ECBFF;"> start</span><span style="color:#9ECBFF;"> ecosystem.config.js</span></span></code></pre></div></li><li><p><strong>指定环境</strong>: 如果你有为不同环境定义的变量，可以在启动时指定：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">pm2</span><span style="color:#9ECBFF;"> start</span><span style="color:#9ECBFF;"> ecosystem.config.js</span><span style="color:#79B8FF;"> --env</span><span style="color:#9ECBFF;"> production</span></span></code></pre></div><p>这将使用<code>env_production</code>中定义的环境变量。</p></li><li><p><strong>管理应用</strong>: 一旦应用启动，你可以使用 PM2的标准命令来管理它们，例如<code>pm2 stop</code>, <code>pm2 restart</code>, 和<code>pm2 delete</code>。</p></li></ol><p>配置文件为应用部署提供了强大而灵活的管理方式，特别是当你需要部署多个应用或需要为应用指定特定的环境变量和配置时。通过精心设计的配置文件，你可以确保应用的部署更加一致和可预测。</p><h2 id="_5-cli-实现配置文件效果" tabindex="-1">5. CLI 实现配置文件效果 <a class="header-anchor" href="#_5-cli-实现配置文件效果" aria-label="Permalink to &quot;5. CLI 实现配置文件效果&quot;">​</a></h2><p>如果你不使用配置文件，而是选择直接使用 PM2的 CLI 命令来实现上面提到的功能，可以通过在命令行中添加特定的选项和参数来完成。下面是如何通过 CLI 命令实现配置文件中提到的一些主要功能：</p><ol><li><p><strong>启动应用并传递参数</strong>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">pm2</span><span style="color:#9ECBFF;"> start</span><span style="color:#9ECBFF;"> app.js</span><span style="color:#79B8FF;"> --name</span><span style="color:#9ECBFF;"> &quot;app1&quot;</span><span style="color:#79B8FF;"> --</span><span style="color:#9ECBFF;"> arg1=value1</span><span style="color:#9ECBFF;"> arg2=value2</span></span></code></pre></div><p>这里<code>--name &quot;app1&quot;</code>设定了应用的名称，<code>-- arg1 arg2</code>向应用传递了参数。</p></li><li><p><strong>指定实例数量</strong>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">pm2</span><span style="color:#9ECBFF;"> start</span><span style="color:#9ECBFF;"> app.js</span><span style="color:#79B8FF;"> -i</span><span style="color:#79B8FF;"> 4</span></span></code></pre></div><p>该命令启动了4个应用实例。如果你想要根据 CPU 核心数量来启动最大实例数，可以使用<code>-i max</code>。</p></li><li><p><strong>启用自动重启</strong>: 自动重启是 PM2的默认行为，无需特别指定。</p></li><li><p><strong>启用文件监控</strong>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">pm2</span><span style="color:#9ECBFF;"> start</span><span style="color:#9ECBFF;"> app.js</span><span style="color:#79B8FF;"> --watch</span></span></code></pre></div><p>这会监控应用目录中文件的变动，并在变动时自动重启应用。</p></li><li><p><strong>限制内存重启</strong>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">pm2</span><span style="color:#9ECBFF;"> start</span><span style="color:#9ECBFF;"> app.js</span><span style="color:#79B8FF;"> --max-memory-restart</span><span style="color:#9ECBFF;"> 1G</span></span></code></pre></div><p>当应用消耗的内存超过1GB 时，PM2将自动重启应用。</p></li><li><p><strong>设置环境变量</strong>: 你可以在启动命令中直接设置环境变量：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">NODE_ENV</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">development</span><span style="color:#B392F0;"> pm2</span><span style="color:#9ECBFF;"> start</span><span style="color:#9ECBFF;"> app.js</span></span></code></pre></div><p>或者，为了同时设置多个环境变量，可以使用：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">pm2</span><span style="color:#9ECBFF;"> start</span><span style="color:#9ECBFF;"> app.js</span><span style="color:#79B8FF;"> --env</span><span style="color:#9ECBFF;"> NODE_ENV=development,env1=13,env2=</span><span style="color:#79B8FF;">32</span></span></code></pre></div></li><li><p><strong>为生产环境设置环境变量</strong>: 对于生产环境，你可以这样设置：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">NODE_ENV</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">production</span><span style="color:#B392F0;"> pm2</span><span style="color:#9ECBFF;"> start</span><span style="color:#9ECBFF;"> app.js</span></span></code></pre></div></li></ol><p>使用 CLI 命令直接设置这些选项的好处是快速简便，特别是对于一次性或临时的任务。但对于更复杂的部署，或者当你需要在多个环境中维护一致的配置时，使用配置文件将更为有效和易于管理。</p><h2 id="_6-监控" tabindex="-1">6. 监控 <a class="header-anchor" href="#_6-监控" aria-label="Permalink to &quot;6. 监控&quot;">​</a></h2><p>PM2提供了一个内置的监控工具，允许你实时查看运行在 PM2下的应用的性能指标，如 CPU 和内存使用情况。这个监控工具可以帮助你了解应用的运行状况，及时发现潜在的问题。</p><h3 id="使用-pm2监控命令行工具" tabindex="-1">使用 PM2监控命令行工具 <a class="header-anchor" href="#使用-pm2监控命令行工具" aria-label="Permalink to &quot;使用 PM2监控命令行工具&quot;">​</a></h3><p><img src="https://github.com/lecepin/blog/assets/11046969/5affd627-6071-4eb6-a594-270e6b879741" alt="image"></p><ol><li><strong>启动监控控制台</strong>: 要查看实时的监控数据，可以在命令行中使用以下命令：<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">pm2</span><span style="color:#9ECBFF;"> monit</span></span></code></pre></div>这会打开一个交互式的监控控制台，其中展示了所有由 PM2管理的进程的 CPU 和内存使用情况。</li></ol><h3 id="使用-pm2-web-界面" tabindex="-1">使用 PM2 Web 界面 <a class="header-anchor" href="#使用-pm2-web-界面" aria-label="Permalink to &quot;使用 PM2 Web 界面&quot;">​</a></h3><p><img src="https://github.com/lecepin/blog/assets/11046969/5609e00f-7b9e-47b9-8004-7ce6d8f78b28" alt="image"></p><p>PM2还提供了一个 Web 界面，称为 PM2 Plus，用于更高级的监控和管理功能，包括远程监控和日志管理。不过，这需要在 PM2 Plus 网站上注册并设置 keymetrics 代理。</p><ol><li><strong>PM2 Plus</strong>: <ul><li>你可以访问<a href="https://pm2.io/" target="_blank" rel="noreferrer">PM2 Plus</a>来获取更多关于这个服务的信息。</li><li>它允许你监控关键指标，设置告警，查看日志，和进行实时的问题排查。</li></ul></li></ol><h3 id="自定义指标" tabindex="-1">自定义指标 <a class="header-anchor" href="#自定义指标" aria-label="Permalink to &quot;自定义指标&quot;">​</a></h3><p>PM2还允许你定义自己的指标来监控。你可以在你的应用中集成 PM2的 API 来发送自定义指标，这样就可以在 PM2的监控工具中查看这些指标了。</p><h2 id="_7-其它" tabindex="-1">7. 其它 <a class="header-anchor" href="#_7-其它" aria-label="Permalink to &quot;7. 其它&quot;">​</a></h2><h3 id="_7-1-负载均衡下的会话管理" tabindex="-1">7.1 负载均衡下的会话管理 <a class="header-anchor" href="#_7-1-负载均衡下的会话管理" aria-label="Permalink to &quot;7.1 负载均衡下的会话管理&quot;">​</a></h3><p>在使用 PM2的集群模式运行多个实例的场景下，确保会话（session）一致性是一个重要的考虑点。由于每个实例都是独立运行的，直接在内存中存储会话信息可能会导致会话不一致的问题，因为用户的后续请求可能被路由到不同的实例上，而不同的实例之间无法共享内存中的会话信息。</p><p>为了解决这个问题，通常的做法是使用一个中央存储来存储会话信息，这样不同的实例可以共享这些信息。以下是一些常见的解决方案：</p><ol><li><p><strong>使用 Redis 存储会话</strong>: Redis 是一种常用的解决方案，它提供了快速的数据读写并支持数据持久化。使用 Redis 作为会话存储，可以确保不同的实例能够访问和更新同一份会话数据。</p></li><li><p><strong>使用数据库存储会话</strong>: 另一种常见的方法是将会话存储在数据库中，如 MongoDB 或 MySQL 等。这样可以确保会话信息的一致性，但可能比使用内存存储或 Redis 的性能稍低。</p></li><li><p><strong>使用其他共享存储方案</strong>: 根据应用的具体需求，还可以考虑使用其他类型的共享存储方案，如 Memcached、Etcd 等。</p></li></ol><p>对于 Node.js 应用，如果你使用 Express 框架，可以利用<code>express-session</code>配合 Redis 等存储的中间件来实现会话的共享。例如，使用<code>connect-redis</code>中间件将会话存储在 Redis 中：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> session</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;express-session&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> RedisStore</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;connect-redis&quot;</span><span style="color:#E1E4E8;">)(session);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#B392F0;">  session</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">    store: </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> RedisStore</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#6A737D;">      // Redis 服务器配置</span></span>\n<span class="line"><span style="color:#E1E4E8;">      host: </span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      port: </span><span style="color:#79B8FF;">6379</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }),</span></span>\n<span class="line"><span style="color:#E1E4E8;">    secret: </span><span style="color:#9ECBFF;">&quot;your_secret&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    resave: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    saveUninitialized: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  })</span></span>\n<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>使用这种方式，无论用户的请求被路由到哪个实例，应用都能访问到同一份会话信息，从而避免了会话不一致的问题。确保你的会话存储方案是可伸缩的，并且可以处理你的应用负载。</p><h3 id="_7-2-异常重启处理" tabindex="-1">7.2 异常重启处理 <a class="header-anchor" href="#_7-2-异常重启处理" aria-label="Permalink to &quot;7.2 异常重启处理&quot;">​</a></h3><p>当 PM2重启应用时，确保应用的当前状态完成后再继续，以及在异常重启下恢复重启前的状态，需要在应用层面做一些策略设计。这通常涉及到优雅的关闭处理和持久化状态管理。</p><h4 id="优雅的关闭处理" tabindex="-1">优雅的关闭处理 <a class="header-anchor" href="#优雅的关闭处理" aria-label="Permalink to &quot;优雅的关闭处理&quot;">​</a></h4><ol><li><p><strong>捕获关闭信号</strong>：在 Node.js 应用中，你可以监听如<code>SIGINT</code>和<code>SIGTERM</code>这样的信号，这样当 PM2尝试重启应用时，你的代码可以捕获这些信号并执行清理逻辑。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">process.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SIGINT&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Received SIGINT. Performing graceful shutdown.&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#B392F0;">  gracefulShutdown</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> gracefulShutdown</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#6A737D;">  // 在这里执行清理操作，如关闭数据库连接、完成正在处理的请求等</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>完成正在处理的请求</strong>：在收到关闭信号后，应用应该停止接受新的请求，但同时确保当前正在处理的请求完成。这可能涉及到跟踪所有活跃的请求并等待它们结束。</p></li></ol><h4 id="恢复状态" tabindex="-1">恢复状态 <a class="header-anchor" href="#恢复状态" aria-label="Permalink to &quot;恢复状态&quot;">​</a></h4><ol><li><p><strong>状态持久化</strong>：为了在重启后恢复状态，应用的关键状态需要持久化，例如存储在数据库或文件系统中。这样，在应用重启后，可以从这些持久化的存储中恢复状态。</p></li><li><p><strong>启动时的状态恢复逻辑</strong>：应用启动时应该包含逻辑来检查并恢复之前的状态。这可能包括读取数据库中的数据，或从文件系统中恢复信息等。</p></li></ol><h4 id="pm2特定策略" tabindex="-1">PM2特定策略 <a class="header-anchor" href="#pm2特定策略" aria-label="Permalink to &quot;PM2特定策略&quot;">​</a></h4><ul><li><p><strong>进程守护</strong>：PM2会守护你的应用进程，如果应用崩溃或非正常退出，它会自动重启应用。这是通过配置 PM2的<code>restart</code>策略实现的。</p></li><li><p><strong>零停机重启</strong>：使用 PM2的<code>reload</code>或<code>gracefulReload</code>命令可以实现零停机重启，这对于不间断服务的应用特别有用。这些命令会等待新的实例启动并接收连接后，再停止旧的实例。</p></li></ul><h3 id="_7-3-sigint-信号超时处理" tabindex="-1">7.3 SIGINT 信号超时处理 <a class="header-anchor" href="#_7-3-sigint-信号超时处理" aria-label="Permalink to &quot;7.3 SIGINT 信号超时处理&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> express</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;express&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> express</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> server</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> app.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Server started on port 3000&quot;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> activeConnections </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Set</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">  // 模拟长时间运行的请求</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> requestId</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  activeConnections.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(requestId);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`Request ${</span><span style="color:#E1E4E8;">requestId</span><span style="color:#9ECBFF;">} started`</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">  setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello World&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    activeConnections.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(requestId);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`Request ${</span><span style="color:#E1E4E8;">requestId</span><span style="color:#9ECBFF;">} finished`</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }, </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 假设请求处理需要10秒</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">process.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SIGINT&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Received SIGINT. Graceful shutdown start.&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 停止服务器接受新的连接</span></span>\n<span class="line"><span style="color:#E1E4E8;">  server.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Server closed. No new connections are accepted.&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 等待所有活动请求完成</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#B392F0;"> checkActiveConnections</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (activeConnections.size </span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#9ECBFF;">        `Waiting for ${</span><span style="color:#E1E4E8;">activeConnections</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">size</span><span style="color:#9ECBFF;">} active connections to finish.`</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#B392F0;">      setTimeout</span><span style="color:#E1E4E8;">(checkActiveConnections, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;All connections finished. Exiting now.&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      process.</span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">  checkActiveConnections</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p>捕获<code>SIGINT</code>信号后，进程确实有机会执行清理逻辑，但这并不意味着 PM2无法再去主动 kill 进程。当你的应用捕获<code>SIGINT</code>信号并进入清理阶段时，PM2会等待一段时间（默认是1600毫秒），这个时间是可配置的。如果应用在这段时间内没有退出，PM2会发送<code>SIGKILL</code>信号来强制终止进程。</p><p>这意味着你的清理逻辑需要在 PM2的超时时间内完成，以确保它能够正常执行并让进程优雅地退出。如果清理逻辑需要的时间超过了 PM2的超时阈值，你可以调整 PM2的配置来增加这个超时时间。</p><p>例如，你可以在启动应用时通过<code>--kill-timeout</code>参数来设置这个超时时间：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">pm2</span><span style="color:#9ECBFF;"> start</span><span style="color:#9ECBFF;"> app.js</span><span style="color:#79B8FF;"> --kill-timeout</span><span style="color:#79B8FF;"> 3000</span></span></code></pre></div><p>这里，<code>--kill-timeout 3000</code>表示 PM2将等待3000毫秒（3秒）给应用足够的时间来处理清理逻辑。如果应用在3秒内没有退出，PM2将使用<code>SIGKILL</code>来强制终止应用。</p><p>这个机制确保了你的应用有机会在 PM2重启或停止它之前完成必要的清理工作，同时也保留了 PM2在应用无法正确响应终止信号时强制关闭它的能力。</p>',65)]))}]]);export{o as __pageData,p as default};
