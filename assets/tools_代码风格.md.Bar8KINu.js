import{_ as s,c as n,b as a,o as e}from"./chunks/framework.CUf7xJpa.js";const l=JSON.parse('{"title":"代码风格","description":"","frontmatter":{},"headers":[{"level":2,"title":"设置webStorm代码风格","slug":"设置webstorm代码风格","link":"#设置webstorm代码风格","children":[]},{"level":2,"title":"editorConfig","slug":"editorconfig","link":"#editorconfig","children":[]},{"level":2,"title":"ESLint","slug":"eslint","link":"#eslint","children":[]},{"level":2,"title":"配置规则","slug":"配置规则","link":"#配置规则","children":[]},{"level":2,"title":"Prettier","slug":"prettier","link":"#prettier","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"tools/代码风格.md","filePath":"tools/代码风格.md"}');const p=s({name:"tools/代码风格.md"},[["render",function(s,l,p,t,i,o){return e(),n("div",null,l[0]||(l[0]=[a('<h1 id="代码风格" tabindex="-1">代码风格 <a class="header-anchor" href="#代码风格" aria-label="Permalink to &quot;代码风格&quot;">​</a></h1><h2 id="设置webstorm代码风格" tabindex="-1">设置webStorm代码风格 <a class="header-anchor" href="#设置webstorm代码风格" aria-label="Permalink to &quot;设置webStorm代码风格&quot;">​</a></h2><p><img src="/assets/webstorm_code_style.NF5_2zWn.jpg" alt="webStorm代码风格设置"></p><h2 id="editorconfig" tabindex="-1">editorConfig <a class="header-anchor" href="#editorconfig" aria-label="Permalink to &quot;editorConfig&quot;">​</a></h2><ul><li><a href="http://editorconfig.org" target="_blank" rel="noreferrer">文档</a></li><li>.editorconfig文件</li></ul><div class="language-editorconfig"><button title="Copy Code" class="copy"></button><span class="lang">editorconfig</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span># http://editorconfig.org</span></span>\n<span class="line"><span>root = true</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 说明</span></span>\n<span class="line"><span>## 设置文件编码为 UTF-8；</span></span>\n<span class="line"><span>## 用两个空格代替制表符；</span></span>\n<span class="line"><span>## 在保存时删除尾部的空白字符；</span></span>\n<span class="line"><span>## 在文件结尾添加一个空白行；</span></span>\n<span class="line"><span>[*]</span></span>\n<span class="line"><span>indent_style = space</span></span>\n<span class="line"><span>indent_size = 2</span></span>\n<span class="line"><span>end_of_line = lf</span></span>\n<span class="line"><span>charset = utf-8</span></span>\n<span class="line"><span>trim_trailing_whitespace = true</span></span>\n<span class="line"><span>insert_final_newline = true</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>[*.md]</span></span>\n<span class="line"><span>trim_trailing_whitespace = false</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>[Makefile]</span></span>\n<span class="line"><span>indent_style = tab</span></span></code></pre></div><h2 id="eslint" tabindex="-1">ESLint <a class="header-anchor" href="#eslint" aria-label="Permalink to &quot;ESLint&quot;">​</a></h2><h2 id="配置规则" tabindex="-1">配置规则 <a class="header-anchor" href="#配置规则" aria-label="Permalink to &quot;配置规则&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;rules&quot;: {</span></span>\n<span class="line"><span>  &quot;no-debugger&quot;: &quot;off&quot;,</span></span>\n<span class="line"><span>  &quot;quotes&quot;: [&quot;error&quot;, &quot;double&quot;]</span></span>\n<span class="line"><span>},</span></span></code></pre></div><p>rules配置 off/0 warn/1 error/2</p><ul><li><a href="http://eslint.cn/" target="_blank" rel="noreferrer">文档</a></li><li>有多个配置文件时的优先级</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>1 .eslintrc.js</span></span>\n<span class="line"><span>2 .eslintrc.yaml</span></span>\n<span class="line"><span>3 .eslintrc.yml</span></span>\n<span class="line"><span>4 .eslintrc.json</span></span>\n<span class="line"><span>5 .eslintrc</span></span>\n<span class="line"><span>6 package.json</span></span></code></pre></div><ul><li>.eslintrc.js</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    parser: </span><span style="color:#9ECBFF;">&#39;@typescript-eslint/parser&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    plugins: [</span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;@typescript-eslint&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">    rules: {</span></span>\n<span class="line"><span style="color:#6A737D;">        // 禁止使用 var</span></span>\n<span class="line"><span style="color:#9ECBFF;">        &#39;no-var&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#6A737D;">        // 优先使用 interface 而不是 type</span></span>\n<span class="line"><span style="color:#9ECBFF;">        &#39;@typescript-eslint/consistent-type-definitions&#39;</span><span style="color:#E1E4E8;">: [</span></span>\n<span class="line"><span style="color:#9ECBFF;">            &quot;error&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#9ECBFF;">            &quot;interface&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        ]</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="prettier" tabindex="-1">Prettier <a class="header-anchor" href="#prettier" aria-label="Permalink to &quot;Prettier&quot;">​</a></h2><ul><li><a href="https://prettier.io/" target="_blank" rel="noreferrer">文档</a></li><li>.prettierrc</li></ul><div class="language-prettier"><button title="Copy Code" class="copy"></button><span class="lang">prettier</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>\n<span class="line"><span>  // 设置强制单引号</span></span>\n<span class="line"><span>  &quot;singleQuote&quot;: true,</span></span>\n<span class="line"><span>  // 为多行数组的非末尾行添加逗号 es5的对象，数组等</span></span>\n<span class="line"><span>  &quot;trailingComma&quot;: &quot;es5&quot;,</span></span>\n<span class="line"><span>  // 每行最大宽度 100</span></span>\n<span class="line"><span>  &quot;printWidth&quot;: 100,</span></span>\n<span class="line"><span>  // 设置语句末尾不加分号</span></span>\n<span class="line"><span>  &quot;semi&quot;: false,</span></span>\n<span class="line"><span>  // jsx中使用单引号</span></span>\n<span class="line"><span>  &quot;jsxSingleQuote&quot;: true,</span></span>\n<span class="line"><span>}</span></span></code></pre></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://mp.weixin.qq.com/s/A1nx4T1KcS6pjjgnWXwKig" target="_blank" rel="noreferrer">最强代码规范之-理解ESLint、Prettier、EditorConfig</a></li></ul>',19)]))}]]);export{l as __pageData,p as default};
