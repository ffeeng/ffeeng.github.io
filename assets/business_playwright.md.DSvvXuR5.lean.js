import{_ as s,c as a,b as n,o as p}from"./chunks/framework.CUf7xJpa.js";const l=JSON.parse('{"title":"端到端测试框架 Playwright 使用入门","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. playwright 介绍","slug":"_1-playwright-介绍","link":"#_1-playwright-介绍","children":[]},{"level":2,"title":"2. Playwright Test for VSCode","slug":"_2-playwright-test-for-vscode","link":"#_2-playwright-test-for-vscode","children":[]},{"level":2,"title":"3. 初始化项目","slug":"_3-初始化项目","link":"#_3-初始化项目","children":[]},{"level":2,"title":"4. 运行测试","slug":"_4-运行测试","link":"#_4-运行测试","children":[]},{"level":2,"title":"5. 添加 cookie","slug":"_5-添加-cookie","link":"#_5-添加-cookie","children":[]},{"level":2,"title":"6. 录制一个测试用例","slug":"_6-录制一个测试用例","link":"#_6-录制一个测试用例","children":[]},{"level":2,"title":"7. 测试用例及断言","slug":"_7-测试用例及断言","link":"#_7-测试用例及断言","children":[]},{"level":2,"title":"8. 小结","slug":"_8-小结","link":"#_8-小结","children":[]}],"relativePath":"business/playwright.md","filePath":"business/playwright.md"}');const o=s({name:"business/playwright.md"},[["render",function(s,l,o,t,e,c){return p(),a("div",null,l[0]||(l[0]=[n('<h1 id="端到端测试框架-playwright-使用入门" tabindex="-1">端到端测试框架 Playwright 使用入门 <a class="header-anchor" href="#端到端测试框架-playwright-使用入门" aria-label="Permalink to &quot;端到端测试框架 Playwright 使用入门&quot;">​</a></h1><p>原文链接：<a href="https://juejin.cn/post/7289740992508215296" target="_blank" rel="noreferrer">https://juejin.cn/post/7289740992508215296</a></p><blockquote><p>📌推荐语： 2020年，微软（Microsoft）开源了一个名为Playwright的工具，与Selenium一样入门简单，支持多语言（Python、Java、Node.js、.NET），支持多浏览器（Chromium、Firefox、Webkit）,可跨平台（Windows、Linux、Mac OS）。Playwright同时支持接口自动化和UI自动化，为现代web应用提供了可靠的端到端的测试能力。 • Playwright优势： 1）自动等待功能让自动化更可靠； 2）自动追踪：可以很方便地配置重试策略，自动的追踪结果，以截图和录屏的方式进行记录； 3）断言机制：会根据网络环境进行自动断言，直到满足某种条件为止； 4）异步执行：Playwright基于socket进行双向通讯，支持同步与异步执行两种方式； 5）可运行多页仿真场景：Playwright是通过上下文管理浏览器，相当于每一个测试用例都会创建一个独立的上下文，浏览器的上下文其实就是一个全新的浏览器，这种方式的好处就是在提速的同时又实现测试与测试之间的隔离，使得测试结果更加准确，所以可以实现并行执行； 6）强大的工具集：还提供了强大的工具集，例如：脚本录制工具codegen、脚本编写以及调试工具playwright等。 官网链接：<a href="https://playwright.dev/" target="_blank" rel="noreferrer">https://playwright.dev/</a></p></blockquote><p><img src="/assets/img.Cm67-o-r.png" alt="img.png"></p><h2 id="_1-playwright-介绍" tabindex="-1">1. playwright 介绍 <a class="header-anchor" href="#_1-playwright-介绍" aria-label="Permalink to &quot;1. playwright 介绍&quot;">​</a></h2><p>Playwright 是一个端到端（E2E）测试框架， 它可在所有现代浏览器中运行功能强大的测试和自动化。支持多种编程语言 API， 包括 JavaScript 、TypeScript、Python, .NET和Java。正因为它基于浏览器，相当于模拟用户真实操作，因此不光能够用来跑测试用例，还可以用来写爬虫。</p><h2 id="_2-playwright-test-for-vscode" tabindex="-1">2. Playwright Test for VSCode <a class="header-anchor" href="#_2-playwright-test-for-vscode" aria-label="Permalink to &quot;2. Playwright Test for VSCode&quot;">​</a></h2><p>我们可以安装一个 vscode 插件Playwright Test for VSCode，来帮助我们运行、录制、调试测试用例。 <img src="/assets/img_1.y7w4alpH.png" alt="img_1.png"></p><h2 id="_3-初始化项目" tabindex="-1">3. 初始化项目 <a class="header-anchor" href="#_3-初始化项目" aria-label="Permalink to &quot;3. 初始化项目&quot;">​</a></h2><p>如果项目中没有安装PlaywrightNPM 包，或者重新开始一个新的测试项目，需要可以在 vscode 命令面板中输入intsll Playwright。 <img src="/assets/img_2.QHv3uu_4.png" alt="img_2.png"> 选择我们常用的浏览器，不必担心选错，后面可以在项目中更改。还可以选择 GitHub Action ，这样就可以轻松在 Github 中持续集成。</p><p>这里我选择 chromium，这样可以只下载一个浏览器内核。 <img src="/assets/img_3.BOLpFzdL.png" alt="img_3.png"></p><p>点击OK后，插件会帮我们自动初始化程序， 下图是初始化的目录结构 <img src="/assets/img_4.CwtvPRx7.png" alt="img_4.png"></p><p>配置文件都在playwright.config.ts中。</p><p>看下package.json，只包含了一个包@playwright/test <img src="/assets/img_5.DI2Qevvw.png" alt="img_5.png"></p><h2 id="_4-运行测试" tabindex="-1">4. 运行测试 <a class="header-anchor" href="#_4-运行测试" aria-label="Permalink to &quot;4. 运行测试&quot;">​</a></h2><p>所有的测试用例都要写在tests文件夹中，默认有一个测试文件，包含有 2 个测试用例，代码在example.spec.ts中。 <img src="/assets/img_6.CvINpxLj.png" alt="img_6.png"></p><p>第一个测试用例：确保标题包含 Playwright；</p><p>第二个测试用例：确保点击 “Get Started”后，跳转到 intro 的链接。</p><p>选择左侧的测试用例，并且勾选Show browser，我们便可以直观的看到 Playwright 运行测试的过程。 <img src="/assets/img_7.CcKXHIpA.png" alt="img_7.png"></p><p>以上例子默认是使用 chromium 来运行的，并且 chromium 不包含任何 cookie 和缓存信息。</p><p>在playwright.config.ts配置文件中， 可以配置启用的浏览器为 chrome，我们只需要增加一个参数channel，让 Playwright 使用浏览器来运行。 也可以是其他浏览器，参数可以为： &quot;chrome&quot;, &quot;chrome-beta&quot;, &quot;chrome-dev&quot;, &quot;chrome-canary&quot;, &quot;msedge&quot;, &quot;msedge-beta&quot;, &quot;msedge-dev&quot;，&quot;msedge-canary&quot;.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>use: {</span></span>\n<span class="line"><span>    channel:&#39;chrome&#39;,</span></span>\n<span class="line"><span>     /* Base URL to use in actions like `await page.goto(&#39;/&#39;)`. */</span></span>\n<span class="line"><span>     // baseURL: &#39;http://127.0.0.1:3000&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */</span></span>\n<span class="line"><span>    trace: &#39;on-first-retry&#39;,</span></span>\n<span class="line"><span>},</span></span></code></pre></div><p>我们虽然改成了使用浏览器来运行，但是启动的浏览器也是一个无痕模式，不包含任何缓存信息。</p><h2 id="_5-添加-cookie" tabindex="-1">5. 添加 cookie <a class="header-anchor" href="#_5-添加-cookie" aria-label="Permalink to &quot;5. 添加 cookie&quot;">​</a></h2><p>测试的系统往往需要登录，而在运行每个测试用例之前运行，都需要登录，这肯定是繁琐的，因此我们可以在运行测试用例之前，手动拷贝 cookies，注入到浏览器中。</p><p>比如掘金的每日签到和抽奖，我就可以使用 Playwright 来实现自动化</p><p>首先建立一个测试文件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { test, expect, </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> Page } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &quot;@playwright/test&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;登录&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> ({</span><span style="color:#FFAB70;">page</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">}) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">addCookies</span><span style="color:#E1E4E8;">([</span></span>\n<span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">name: </span><span style="color:#9ECBFF;">&quot;sessionid&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">value: </span><span style="color:#9ECBFF;">&quot;xxx&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">path: </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">domain: </span><span style="color:#9ECBFF;">&quot;.juejin.cn&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">},</span></span>\n<span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">name: </span><span style="color:#9ECBFF;">&quot;sessionid_ss&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">value: </span><span style="color:#9ECBFF;">&quot;xxx&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">path: </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">domain: </span><span style="color:#9ECBFF;">&quot;.juejin.cn&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">},</span></span>\n<span class="line"><span style="color:#E1E4E8;">]);</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">goto</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://juejin.cn/&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p>打开 chrome 控制台，复制 cookies， 添加到代码中 <img src="/assets/img_8.d1CxTywd.png" alt="img_8.png"> 此时点击左侧运行的测试用例，发现已经是登录状态。</p><h2 id="_6-录制一个测试用例" tabindex="-1">6. 录制一个测试用例 <a class="header-anchor" href="#_6-录制一个测试用例" aria-label="Permalink to &quot;6. 录制一个测试用例&quot;">​</a></h2><p>如果要手动去查找 dom ，从零开始写一个测试用例肯定是繁琐的，因此 Playwright VSCode 插件提供了录制功能。</p><p>运行上一次测试用例后，浏览器是未关闭的。此时我们点击 vscode 左侧的Record new按钮，vscode 便会自动创建一个测试文件，并且记录操作步骤。</p><p>录制时，浏览器又是一个全新的，不保留任何状态，那如果我们要测试的是登录后的功能，岂不是又要登录？ 其实 playwright 可以保存登录状态。</p><p>在上面测试用例后加一句 storageState。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { test, expect, </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> Page } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &quot;@playwright/test&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;登录&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> ({</span><span style="color:#FFAB70;">page</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">}) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">addCookies</span><span style="color:#E1E4E8;">([</span></span>\n<span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">name: </span><span style="color:#9ECBFF;">&quot;sessionid&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">value: </span><span style="color:#9ECBFF;">&quot;xxx&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">path: </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">domain: </span><span style="color:#9ECBFF;">&quot;.juejin.cn&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">},</span></span>\n<span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">name: </span><span style="color:#9ECBFF;">&quot;sessionid_ss&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">value: </span><span style="color:#9ECBFF;">&quot;xxx&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">path: </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">domain: </span><span style="color:#9ECBFF;">&quot;.juejin.cn&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">},</span></span>\n<span class="line"><span style="color:#E1E4E8;">]);</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">goto</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://juejin.cn/&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">+</span><span style="color:#F97583;">   await</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">storageState</span><span style="color:#E1E4E8;">({ path: </span><span style="color:#9ECBFF;">&#39;state.json&#39;</span><span style="color:#E1E4E8;"> });</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span></code></pre></div><pre><code>并且在playwright.config.ts中，配置存储位置。\n</code></pre><p><img src="/assets/img_9.CD1hr26L.png" alt="img_9.png"> 此时我们录制操作，就已经是登录状态了。 <img src="/assets/img_10.cSh0Oq19.png" alt="img_10.png"> 以下便是录制后的代码。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { test, expect } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;@playwright/test&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#FFAB70;">page</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">goto</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://juejin.cn/&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">getByRole</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;button&#39;</span><span style="color:#E1E4E8;">, { name: </span><span style="color:#9ECBFF;">&#39;去签到&#39;</span><span style="color:#E1E4E8;"> }).</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">getByRole</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;button&#39;</span><span style="color:#E1E4E8;">, { name: </span><span style="color:#9ECBFF;">&#39;立即签到&#39;</span><span style="color:#E1E4E8;"> }).</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">getByRole</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;button&#39;</span><span style="color:#E1E4E8;">, { name: </span><span style="color:#9ECBFF;">&#39;去抽奖&#39;</span><span style="color:#E1E4E8;"> }).</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">getByText</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;免费抽奖次数：1次&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">getByRole</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;button&#39;</span><span style="color:#E1E4E8;">, { name: </span><span style="color:#9ECBFF;">&#39;收下奖励&#39;</span><span style="color:#E1E4E8;"> }).</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p>录制完成后，直接运行代码可能会报错，我们需要调整一下，因为有些文本是异步请求实现的，有些事件是请求成功后绑定的，在手动录制时，因为已经响应完成，因此没问题，我们加上 2 句延迟。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#FFAB70;">page</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">goto</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://juejin.cn/&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">+</span><span style="color:#F97583;">  await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">waitForTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">   await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">getByRole</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;button&quot;</span><span style="color:#E1E4E8;">, { name:</span><span style="color:#9ECBFF;"> /</span><span style="color:#DBEDFF;">去签到</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">已签到</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> }).</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">+</span><span style="color:#F97583;">  await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">waitForTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">   await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">getByRole</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;button&quot;</span><span style="color:#E1E4E8;">, { name:</span><span style="color:#9ECBFF;"> /</span><span style="color:#DBEDFF;">今日已签到</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">立即签到</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> }).</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">   await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">getByRole</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;button&quot;</span><span style="color:#E1E4E8;">, { name: </span><span style="color:#9ECBFF;">&quot;去抽奖&quot;</span><span style="color:#E1E4E8;"> }).</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> lotteryElement</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#turntable-item-0&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> buttonText</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> lotteryElement?.</span><span style="color:#B392F0;">textContent</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (buttonText </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;免费抽奖次数：1次&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> lotteryElement?.</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">getByRole</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;button&quot;</span><span style="color:#E1E4E8;">, { name: </span><span style="color:#9ECBFF;">&quot;收下奖励&quot;</span><span style="color:#E1E4E8;"> }).</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">page.</span><span style="color:#B392F0;">locator</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#turntable-item-0&quot;</span><span style="color:#E1E4E8;">, { hasText:</span><span style="color:#9ECBFF;"> /</span><span style="color:#DBEDFF;">单抽</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toBeDefined</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p>便可以运行成功，注意这里我使用了waitForTimeout这个 api 在官网中已经被标记了废弃(deprecate)</p><p>实际测试场景中请使用改用网络事件、选择器变得可见等信号。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">goto</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://juejin.cn/&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">waitForResponse</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">res.</span><span style="color:#B392F0;">url</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user_api/v1/incentive_activity/award_after_login&quot;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">getByRole</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;button&quot;</span><span style="color:#E1E4E8;">, { name:</span><span style="color:#9ECBFF;"> /</span><span style="color:#DBEDFF;">去签到</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">已签到</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> }).</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">waitForResponse</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">res.</span><span style="color:#B392F0;">url</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/growth_api/v2/get_today_status&quot;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">getByRole</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;button&quot;</span><span style="color:#E1E4E8;">, { name:</span><span style="color:#9ECBFF;"> /</span><span style="color:#DBEDFF;">今日已签到</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">立即签到</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> }).</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><p>等待接口响应成功后再出发点击事件。</p><p>还有一点就是，自动录制的代码，一般使用了语义化定位方法，比如getByRole、getByText，这些定位器往往不够准确，改动代码会导致测试用例失效。</p><p>因此我们可以使用locator定位器来替换。</p><p>在 Playwright 中，Locator 表示一种元素查找方式，是 Playwright 提供的一组方法，用于定位页面上的元素。 Locator 支持 XPath 和 CSS 选择器</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">locator</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#9ECBFF;">&#39;#tsf &gt; div:nth-child(2) &gt; div.A8SBwf &gt; div.RNNXgb &gt; div &gt; div.a4bIc &gt; input&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page</span></span>\n<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">locator</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;//*[@id=&quot;tsf&quot;]/div[2]/div[1]/div[1]/div/div[2]/input&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><p>在 vscode 中可以使用 Pick locator 快速活动当前的 dom 定位。 <img src="/assets/img_11.DLeWYXEw.png" alt="img_11.png"><img src="/assets/img_12.DN2Lj9Lb.png" alt="img_12.png"></p><h2 id="_7-测试用例及断言" tabindex="-1">7. 测试用例及断言 <a class="header-anchor" href="#_7-测试用例及断言" aria-label="Permalink to &quot;7. 测试用例及断言&quot;">​</a></h2><p>录制的测试代码只能确保业务能够跑通，但不能证明程序的可靠与健壮。一旦测试用例出错，也不知道是程序错误还是测试用例错误，因此我们还是需要根据测试用例来写可靠的测试代码。</p><p>比如上述掘金抽奖程序可以包含以下测试用例 • 签到的状态需要根据接口返回显示 通过 network 查看签到返回如下： <img src="/assets/img_13.SsfZ5tx5.png" alt="img_13.png"> 因此我的签到测试用例代码如下</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;签到的状态根据接口返回显示&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#FFAB70;">page</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">goto</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://juejin.cn/user/center/signin&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> promise</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">waitForResponse</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">res.</span><span style="color:#B392F0;">url</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/growth_api/v2/get_today_status&quot;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> res</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> promise.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (res.data.check_in_done) {</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#B392F0;"> expect</span><span style="color:#E1E4E8;">(page.</span><span style="color:#B392F0;">locator</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.signedin&quot;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">toHaveText</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;今日已签到&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#B392F0;"> expect</span><span style="color:#E1E4E8;">(page.</span><span style="color:#B392F0;">locator</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.signedin&quot;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">toHaveText</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;立即签到&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">getByRole</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;button&quot;</span><span style="color:#E1E4E8;">, { name:</span><span style="color:#9ECBFF;"> /</span><span style="color:#DBEDFF;">立即签到</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> }).</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">getByRole</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;button&quot;</span><span style="color:#E1E4E8;">, { name: </span><span style="color:#9ECBFF;">&quot;去抽奖&quot;</span><span style="color:#E1E4E8;"> }).</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#6A737D;">//调整到抽奖页面</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#B392F0;"> expect</span><span style="color:#E1E4E8;">(page).</span><span style="color:#B392F0;">toHaveURL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">user</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#DBEDFF;">center</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#DBEDFF;">lottery</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><ul><li>抽奖页面，根据接口返回显示抽奖次数和奖品 通过 network，看到抽奖配置接口返回如下： <img src="/assets/img_14.8NWF7zAK.png" alt="img_14.png"> 因此我的测试用例代码如下</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;根据接口返回显示抽奖次数&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#FFAB70;">page</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">goto</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://juejin.cn/user/center/lottery&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> promise</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">waitForResponse</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">res.</span><span style="color:#B392F0;">url</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/growth_api/v1/lottery_config/get&quot;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> res</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> promise.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> lotteryNames</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> res.data.lottery.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (item.unlock_count </span><span style="color:#F97583;">===</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">return</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> RegExp</span><span style="color:#E1E4E8;">(item.lottery_name);</span></span>\n<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">return</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> RegExp</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`再抽${</span><span style="color:#E1E4E8;">item</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">unlock_count</span><span style="color:#9ECBFF;">}次解锁`</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#B392F0;"> expect</span><span style="color:#E1E4E8;">(page.</span><span style="color:#B392F0;">locator</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.item-container .turntable-item&quot;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">toHaveText</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">lotteryNames</span></span>\n<span class="line"><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (res.data.free_count) {</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#B392F0;"> expect</span><span style="color:#E1E4E8;">(page.</span><span style="color:#B392F0;">locator</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#turntable-item-0&quot;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">toHaveText</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#9ECBFF;">`免费抽奖次数：${</span><span style="color:#E1E4E8;">res</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">data</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">free_count</span><span style="color:#9ECBFF;">}次`</span></span>\n<span class="line"><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#B392F0;"> expect</span><span style="color:#E1E4E8;">(page.</span><span style="color:#B392F0;">locator</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#turntable-item-0&quot;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">toHaveText</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;单抽 200&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p>有了以上断言，我们便可以确保前端页面显示与接口返回显示一致。 运行完成后，可以在 playwright-report 查看测试报告。 <img src="/assets/img_15.CbxyFyG1.png" alt="img_15.png"></p><h2 id="_8-小结" tabindex="-1">8. 小结 <a class="header-anchor" href="#_8-小结" aria-label="Permalink to &quot;8. 小结&quot;">​</a></h2><p>本文介绍了 Playwright 测试框架的入门使用，Playwright 是一个功能强大的端到端（E2E）测试框架，支持多种编程语言 API，适用于现代浏览器，还可用于编写网络爬虫。</p><p>首先介绍了 Playwright Test for VSCode 插件，以及如何初始化测试项目，如何运行测试用例，并指出可以选择不同的浏览器作为测试环境， 如何添加 Cookie 来模拟登录状态，以及如何使用录制功能来自动生成测试代码。</p><p>另外，文章强调了使用 Locator 定位器替代语义化定位方法，以提高测试的准确性。最后，我们通过了一个掘金抽奖程序实例强调了断言的重要性，以确保测试代码的可靠性。</p>',60)]))}]]);export{l as __pageData,o as default};
