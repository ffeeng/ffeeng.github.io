import{_ as s,c as a,b as n,o as e}from"./chunks/framework.CUf7xJpa.js";const l=JSON.parse('{"title":"工作流程","description":"","frontmatter":{},"headers":[{"level":2,"title":"分支管理","slug":"分支管理","link":"#分支管理","children":[{"level":3,"title":"分支流程管理","slug":"分支流程管理","link":"#分支流程管理","children":[]},{"level":3,"title":"Fork 相关","slug":"fork-相关","link":"#fork-相关","children":[]},{"level":3,"title":"主仓库新建分支后","slug":"主仓库新建分支后","link":"#主仓库新建分支后","children":[]},{"level":3,"title":"MR之前","slug":"mr之前","link":"#mr之前","children":[]},{"level":3,"title":"开发流程","slug":"开发流程","link":"#开发流程","children":[]},{"level":3,"title":"进阶","slug":"进阶","link":"#进阶","children":[]}]},{"level":2,"title":"前端开发规范lint","slug":"前端开发规范lint","link":"#前端开发规范lint","children":[]},{"level":2,"title":"发版","slug":"发版","link":"#发版","children":[]}],"relativePath":"business/workflow.md","filePath":"business/workflow.md"}');const t=s({name:"business/workflow.md"},[["render",function(s,l,t,p,o,r){return e(),a("div",null,l[0]||(l[0]=[n('<h1 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to &quot;工作流程&quot;">​</a></h1><p><img src="/assets/img_27.CpZTDumj.png" alt="img_27.png"></p><h2 id="分支管理" tabindex="-1">分支管理 <a class="header-anchor" href="#分支管理" aria-label="Permalink to &quot;分支管理&quot;">​</a></h2><h3 id="分支流程管理" tabindex="-1">分支流程管理 <a class="header-anchor" href="#分支流程管理" aria-label="Permalink to &quot;分支流程管理&quot;">​</a></h3><p>• 从 Master 拉出 RC 分支 (由 Maintainer 执行) @</p><ol><li>从 RC 分支拉出 Feat 分支</li><li>在 Fork 的个人仓库上的 Feat 分支进行功能开发，向主仓库的 Feat 分支发 MR，review 后合入</li><li>Feat 分支开发完成后，进行功能测试，通过后，向 RC 发起 MR， review 后由测试合入</li><li>RC 分支开发完成后，进行合并测试</li><li>未通过，打回 Feat 分支继续修改</li><li>通过后，由测试向 Master 发起 MR 并合入 • Hotfix 分支从 Master 拉出，修复完成后合回 Master，并同步到 RC <img src="/assets/img_24.D5hr5YAx.png" alt="img_24.png"></li></ol><h3 id="fork-相关" tabindex="-1">Fork 相关 <a class="header-anchor" href="#fork-相关" aria-label="Permalink to &quot;Fork 相关&quot;">​</a></h3><p>将主仓库 fork 到自己账号后 拉取个人仓库代码，并将主仓库添加为 upstream</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> clone</span><span style="color:#9ECBFF;"> 个人仓库URL</span></span>\n<span class="line"><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> remote</span><span style="color:#9ECBFF;"> add</span><span style="color:#9ECBFF;"> upstream</span><span style="color:#9ECBFF;"> 主仓库URL</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># 操作完成后可用该命令检查，origin 和 upstream 会各有2个（fetch 和 push）</span></span>\n<span class="line"><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> remote</span><span style="color:#79B8FF;"> -v</span></span></code></pre></div><p>如果本地是clone了主仓库，那么修改一下URL即可</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> remote</span><span style="color:#9ECBFF;"> set-url</span><span style="color:#9ECBFF;"> origin</span><span style="color:#9ECBFF;"> 个人仓库URL</span></span>\n<span class="line"><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> remote</span><span style="color:#9ECBFF;"> add</span><span style="color:#9ECBFF;"> upstream</span><span style="color:#9ECBFF;"> 主仓库URL</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># 操作完成后可用该命令检查，origin 和 upstream 会各有2个（fetch 和 push）</span></span>\n<span class="line"><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> remote</span><span style="color:#79B8FF;"> -v</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># 然后将本地分支推到origin</span></span>\n<span class="line"><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> fetch</span><span style="color:#9ECBFF;"> origin</span></span>\n<span class="line"><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> push</span><span style="color:#9ECBFF;"> origin</span><span style="color:#9ECBFF;"> feat_a</span></span></code></pre></div><h3 id="主仓库新建分支后" tabindex="-1">主仓库新建分支后 <a class="header-anchor" href="#主仓库新建分支后" aria-label="Permalink to &quot;主仓库新建分支后&quot;">​</a></h3><p>从 upstream 主仓库拉取最新分支，并推到 origin 个人仓库，并使用 --set-upstream 参数将该分支与 origin 绑定</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> fetch</span><span style="color:#9ECBFF;"> upstream</span></span>\n<span class="line"><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> checkout</span><span style="color:#79B8FF;"> -b</span><span style="color:#9ECBFF;"> feat_a</span><span style="color:#9ECBFF;"> upstream/feat_a</span></span>\n<span class="line"><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> push</span><span style="color:#79B8FF;"> --set-upstream</span><span style="color:#9ECBFF;"> origin</span></span></code></pre></div><h3 id="mr之前" tabindex="-1">MR之前 <a class="header-anchor" href="#mr之前" aria-label="Permalink to &quot;MR之前&quot;">​</a></h3><p>在发起一个 MR 之前，必须确保自己已同步最新代码，并解决完冲突</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># 先将本地改动推向个人仓库 origin，避免 rebase 操作失误，弄丢了 commit</span></span>\n<span class="line"><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> push</span><span style="color:#9ECBFF;"> origin</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># 这里以feat_a分支举例，实际操作时，是 rebase MR 的目标分支</span></span>\n<span class="line"><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> fetch</span><span style="color:#9ECBFF;"> upstream</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> rebase</span><span style="color:#9ECBFF;"> upstream/feat_a</span></span>\n<span class="line"><span style="color:#6A737D;"># rebase 成功，强推回 origin</span></span>\n<span class="line"><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> push</span><span style="color:#9ECBFF;"> origin</span><span style="color:#79B8FF;"> -f</span></span></code></pre></div><p>除了发起 MR 之前，平时闲暇时可以多做该操作，同步越频繁，冲突时压力越小</p><p>也可以使用 git merge，两者的区别可参考 <a href="https://github.com/geeeeeeeeek/git-recipes/wiki/5.1-%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6%EF%BC%9AMerge%E3%80%81Rebase-%E7%9A%84%E9%80%89%E6%8B%A9" target="_blank" rel="noreferrer">https://github.com/geeeeeeeeek/git-recipes/wiki/5.1-代码合并：Merge、Rebase-的选择</a></p><h3 id="开发流程" tabindex="-1">开发流程 <a class="header-anchor" href="#开发流程" aria-label="Permalink to &quot;开发流程&quot;">​</a></h3><p><img src="/assets/img_25.CQRApWWD.png" alt="img_25.png"></p><h3 id="进阶" tabindex="-1">进阶 <a class="header-anchor" href="#进阶" aria-label="Permalink to &quot;进阶&quot;">​</a></h3><p>管理好自己的仓库，使用 rebase -i 减少无谓的 commit，可参考 <a href="https://www.ruanyifeng.com/blog/2015/08/git-use-process.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2015/08/git-use-process.html</a></p><h2 id="前端开发规范lint" tabindex="-1">前端开发规范lint <a class="header-anchor" href="#前端开发规范lint" aria-label="Permalink to &quot;前端开发规范lint&quot;">​</a></h2><p>lint eslint commitLint stylelint</p><h2 id="发版" tabindex="-1">发版 <a class="header-anchor" href="#发版" aria-label="Permalink to &quot;发版&quot;">​</a></h2><p><img src="/assets/img_26.BYy0WHo9.png" alt="img_26.png"></p>',27)]))}]]);export{l as __pageData,t as default};
