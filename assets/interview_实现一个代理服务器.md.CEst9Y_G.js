import{_ as s,c as a,b as n,o as l}from"./chunks/framework.CUf7xJpa.js";const p=JSON.parse('{"title":"实现一个代理服务器","description":"","frontmatter":{},"headers":[{"level":2,"title":"问题描述","slug":"问题描述","link":"#问题描述","children":[]},{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]}],"relativePath":"interview/实现一个代理服务器.md","filePath":"interview/实现一个代理服务器.md"}');const o=s({name:"interview/实现一个代理服务器.md"},[["render",function(s,p,o,e,r,t){return l(),a("div",null,p[0]||(p[0]=[n('<h1 id="实现一个代理服务器" tabindex="-1">实现一个代理服务器 <a class="header-anchor" href="#实现一个代理服务器" aria-label="Permalink to &quot;实现一个代理服务器&quot;">​</a></h1><h2 id="问题描述" tabindex="-1">问题描述 <a class="header-anchor" href="#问题描述" aria-label="Permalink to &quot;问题描述&quot;">​</a></h2><p>要实现一个类似 whistle 的代理服务器，你需要使用 JavaScript 和一些网络编程的知识。以下是一个简单的示例，展示了如何使用 Node.js 创建一个基本的 HTTP 代理服务器。这个代理服务器将监听来自客户端的 HTTP 请求，并将请求转发到目标服务器，然后将响应返回给客户端。</p><h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> http</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> url</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;url&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> httpProxy</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http-proxy&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 创建一个代理服务器实例</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> proxy</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> httpProxy.</span><span style="color:#B392F0;">createProxyServer</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 创建一个 HTTP 服务器来处理客户端请求</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> server</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> http.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">  // 解析请求的 URL</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> parsedUrl</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(req.url);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 设置代理服务器的目标地址</span></span>\n<span class="line"><span style="color:#E1E4E8;">  proxy.</span><span style="color:#B392F0;">web</span><span style="color:#E1E4E8;">(req, res, { target: </span><span style="color:#9ECBFF;">`http://${</span><span style="color:#E1E4E8;">parsedUrl</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">hostname</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;"> });</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 监听指定的端口</span></span>\n<span class="line"><span style="color:#E1E4E8;">server.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8080</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;代理服务器正在监听 8080 端口&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div>',5)]))}]]);export{p as __pageData,o as default};
