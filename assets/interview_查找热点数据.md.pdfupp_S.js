import{_ as s,c as n,b as a,o as l}from"./chunks/framework.CUf7xJpa.js";const p=JSON.parse('{"title":"查找热点数据","description":"","frontmatter":{},"headers":[{"level":2,"title":"问题描述","slug":"问题描述","link":"#问题描述","children":[]},{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]}],"relativePath":"interview/查找热点数据.md","filePath":"interview/查找热点数据.md"}');const o=s({name:"interview/查找热点数据.md"},[["render",function(s,p,o,e,t,r){return l(),n("div",null,p[0]||(p[0]=[a('<h1 id="查找热点数据" tabindex="-1">查找热点数据 <a class="header-anchor" href="#查找热点数据" aria-label="Permalink to &quot;查找热点数据&quot;">​</a></h1><h2 id="问题描述" tabindex="-1">问题描述 <a class="header-anchor" href="#问题描述" aria-label="Permalink to &quot;问题描述&quot;">​</a></h2><p>给你一个整数数组 nums 和一个整数 k ，请你返回其中出现频率前 k 高的元素。你可以按任意顺序返回答案。</p><ul><li>1 &lt;= nums.length &lt;= 10^5</li><li>k 的取值范围是 [1, 数组中不相同的元素的个数]</li><li>题目数据保证答案唯一，换句话说，数组中前 k 个高频元素的集合是唯一的</li></ul><p>你所设计算法的时间复杂度必须优于 O(n log n) ，其中 n 是数组大小。</p><p><strong>示例 1</strong></p><p>输入: nums = [1,1,1,2,2,3], k = 2</p><p>输出: [1,2]</p><p><strong>示例 2</strong></p><p>输入: nums = [1], k = 1</p><p>输出: [1]</p><h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> solution</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">k</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">  // Please write your code here</span></span>\n<span class="line"><span style="color:#F97583;">  let</span><span style="color:#E1E4E8;"> map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> arr</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> []</span></span>\n<span class="line"><span style="color:#F97583;">  for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> nums) {</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (map[num]) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      map[num] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> map[num] </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 1</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      map[num] </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 1</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#F97583;">  for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> map) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    arr.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">([num, map[num]])</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> res</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> b[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> a[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]).</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, k);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res)</span></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> res.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">i</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> i[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]).</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#6A737D;">  //  You can add more test cases here</span></span>\n<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">solution</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">], </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;1,2&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">solution</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;1&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">();</span></span></code></pre></div>',13)]))}]]);export{p as __pageData,o as default};
