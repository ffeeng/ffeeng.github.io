import{_ as s,c as a,b as n,o as l}from"./chunks/framework.CUf7xJpa.js";const e=JSON.parse('{"title":"next","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. Next.js","slug":"_1-next-js","link":"#_1-next-js","children":[]},{"level":2,"title":"2. 诞生背景","slug":"_2-诞生背景","link":"#_2-诞生背景","children":[]},{"level":2,"title":"3. 安装","slug":"_3-安装","link":"#_3-安装","children":[{"level":3,"title":"使用 create-next-app 创建新项目","slug":"使用-create-next-app-创建新项目","link":"#使用-create-next-app-创建新项目","children":[]},{"level":3,"title":"手动添加到现有的 React 项目","slug":"手动添加到现有的-react-项目","link":"#手动添加到现有的-react-项目","children":[]},{"level":3,"title":"Next.js 的基本目录和工作结构","slug":"next-js-的基本目录和工作结构","link":"#next-js-的基本目录和工作结构","children":[]},{"level":3,"title":"最小工作流程","slug":"最小工作流程","link":"#最小工作流程","children":[]}]},{"level":2,"title":"4. 目录结构","slug":"_4-目录结构","link":"#_4-目录结构","children":[{"level":3,"title":"顶层文件夹","slug":"顶层文件夹","link":"#顶层文件夹","children":[]},{"level":3,"title":"顶层文件","slug":"顶层文件","link":"#顶层文件","children":[]},{"level":3,"title":"app 路由约定","slug":"app-路由约定","link":"#app-路由约定","children":[]},{"level":3,"title":"pages 路由约定","slug":"pages-路由约定","link":"#pages-路由约定","children":[]}]},{"level":2,"title":"5. 路由","slug":"_5-路由","link":"#_5-路由","children":[{"level":3,"title":"pages 路由器（Pages Router）","slug":"pages-路由器-pages-router","link":"#pages-路由器-pages-router","children":[]},{"level":3,"title":"app 路由器（App Router）","slug":"app-路由器-app-router","link":"#app-路由器-app-router","children":[]}]},{"level":2,"title":"6. 示例","slug":"_6-示例","link":"#_6-示例","children":[{"level":3,"title":"6.1 前后端接口声明&调用","slug":"_6-1-前后端接口声明-调用","link":"#_6-1-前后端接口声明-调用","children":[]},{"level":3,"title":"6.2 登录场景","slug":"_6-2-登录场景","link":"#_6-2-登录场景","children":[]},{"level":3,"title":"6.3 接口平台场景","slug":"_6-3-接口平台场景","link":"#_6-3-接口平台场景","children":[]}]},{"level":2,"title":"7. 部署","slug":"_7-部署","link":"#_7-部署","children":[{"level":3,"title":"步骤 1: 构建应用","slug":"步骤-1-构建应用","link":"#步骤-1-构建应用","children":[]},{"level":3,"title":"步骤 2: 安装依赖","slug":"步骤-2-安装依赖","link":"#步骤-2-安装依赖","children":[]},{"level":3,"title":"步骤 3: 启动应用","slug":"步骤-3-启动应用","link":"#步骤-3-启动应用","children":[]},{"level":3,"title":"步骤 4: 使用进程管理器（可选）","slug":"步骤-4-使用进程管理器-可选","link":"#步骤-4-使用进程管理器-可选","children":[]},{"level":3,"title":"步骤 5: 设置环境变量（可选）","slug":"步骤-5-设置环境变量-可选","link":"#步骤-5-设置环境变量-可选","children":[]},{"level":3,"title":"步骤 6: 反向代理设置（可选）","slug":"步骤-6-反向代理设置-可选","link":"#步骤-6-反向代理设置-可选","children":[]}]}],"relativePath":"backend/nest.md","filePath":"backend/nest.md"}');const o=s({name:"backend/nest.md"},[["render",function(s,e,o,p,t,c){return l(),a("div",null,e[0]||(e[0]=[n('<h1 id="next" tabindex="-1">next <a class="header-anchor" href="#next" aria-label="Permalink to &quot;next&quot;">​</a></h1><p><img src="https://github.com/lecepin/blog/assets/11046969/396a1398-1e29-4186-812d-7133ab26a0c8" alt="image"></p><h2 id="_1-next-js" tabindex="-1">1. Next.js <a class="header-anchor" href="#_1-next-js" aria-label="Permalink to &quot;1. Next.js&quot;">​</a></h2><p>Next.js 是一个使用 React 构建单页应用程序（SPA）的开源 JavaScript 框架。它使得构建服务端渲染（SSR）和静态网站生成（SSG）的 React 应用程序变得简单和高效。Next.js 由 Vercel（原 Zeit）公司开发，并且自推出以来得到了广泛的关注和使用。</p><p>Next.js 提供了一系列的特性和优势，包括但不限于：</p><ol><li><p><strong>服务端渲染（SSR）</strong>：每次页面请求时，都在服务器上实时渲染页面，这有助于提高首屏加载速度并改善搜索引擎优化（SEO）。</p></li><li><p><strong>静态网站生成（SSG）</strong>：在构建时生成静态的 HTML 页面，可以部署到任何静态网站托管服务上，进一步提高性能和扩展性。</p></li><li><p><strong>文件系统路由</strong>：Next.js 通过 <code>/pages</code> 目录中的文件结构自动创建路由，每个 React 组件文件对应一个路由。</p></li><li><p><strong>自动代码拆分</strong>：Next.js 会自动对每个页面进行代码拆分，只加载当前页面所需的代码，这有助于减少页面的加载时间。</p></li><li><p><strong>API 路由</strong>：可以在 <code>/pages/api</code> 目录下创建 API 路由，方便构建 API 接口。</p></li><li><p><strong>内置 CSS 和 Sass 支持</strong>：Next.js 支持 CSS Modules，并内置了对 CSS-in-JS 库的支持，同时也支持预处理器如 Sass。</p></li><li><p><strong>开箱即用的 TypeScript 支持</strong>：Next.js 提供了对 TypeScript 的内置支持，无需额外的配置。</p></li><li><p><strong>插件生态系统</strong>：社区提供了大量的 Next.js 插件，可以很容易地扩展应用的功能。</p></li></ol><p>Next.js 的开发体验通常被认为是它的主要优点之一，因为它简化了许多传统上需要手动配置的部分，例如路由和代码拆分。这使得开发者可以专注于编写应用逻辑，而不是花费过多时间在构建配置上。由于其灵活性和性能，Next.js 已经被许多企业用于构建生产级的网站和应用。</p><h2 id="_2-诞生背景" tabindex="-1">2. 诞生背景 <a class="header-anchor" href="#_2-诞生背景" aria-label="Permalink to &quot;2. 诞生背景&quot;">​</a></h2><p>首次发布于 2016 年。它的诞生背景是基于开发者和企业对构建更快、更优化的 Web 应用程序的需求，特别是在服务端渲染（SSR）和搜索引擎优化（SEO）方面。React 本身是一个客户端渲染的库，这意味着 JavaScript 需要在用户的浏览器中运行才能生成 HTML 内容。这种模式在用户体验和性能上存在一些挑战，尤其是对首屏加载时间和 SEO 不友好。</p><p>Next.js 主要解决了以下问题：</p><ol><li><p><strong>SEO 和首屏加载性能</strong>： 传统的客户端渲染的 React 应用可能不利于搜索引擎爬虫的抓取，且首次加载时间较长。Next.js 提供服务端渲染作为默认行为，这意味着页面在服务器上被渲染为 HTML，然后发送给客户端。这样做可以显著提升首屏加载速度，并对搜索引擎优化友好。</p></li><li><p><strong>开发效率</strong>： 在使用 React 开发大型应用时，开发者通常需要配置路由、代码拆分、构建优化等。Next.js 通过约定大于配置的方式，减少了这些常见任务的手动设置，提供了简易的文件系统路由、自动的代码拆分和热加载，提高了开发效率。</p></li><li><p><strong>构建和部署</strong>： Next.js 提供现成的构建系统和对持续集成的优化，使得将应用从开发阶段迁移到生产变得简单。此外，与 Vercel 平台的无缝集成也让部署变得异常轻松。</p></li><li><p><strong>灵活的数据获取策略</strong>： Next.js 提供了灵活的数据获取方法，如 <code>getStaticProps</code> 和 <code>getServerSideProps</code>，使得开发者可以根据页面的需求选择不同的数据预渲染策略，例如静态生成或服务器端渲染。</p></li><li><p><strong>无需额外设置的 TypeScript 支持</strong>： Next.js 从一开始就考虑了对 TypeScript 的支持，让开发者能够享受到强类型语言带来的好处，而无需复杂的配置。</p></li><li><p><strong>API 路由</strong>： Next.js 允许开发者在同一个项目中构建前端页面和 API 接口，简化了全栈应用的开发过程。</p></li><li><p><strong>生态系统和社区支持</strong>： Next.js 随着时间的推移建立起了一个健康的插件生态系统，并且得到了强大的社区支持，这为开发者提供了各种资源和第三方库的集成。</p></li></ol><p>总之，Next.js 的出现是为了简化和优化基于 React 的应用开发流程，同时提供了高性能和 SEO 友好的解决方案，它代表了当代 Web 应用开发的一个重要趋势。</p><h2 id="_3-安装" tabindex="-1">3. 安装 <a class="header-anchor" href="#_3-安装" aria-label="Permalink to &quot;3. 安装&quot;">​</a></h2><p>安装 Next.js 非常简单，主要有两种方式：使用 <code>create-next-app</code> 脚手架来创建新项目，或者手动添加到现有的 React 项目中。以下是安装 Next.js 的步骤：</p><h3 id="使用-create-next-app-创建新项目" tabindex="-1">使用 create-next-app 创建新项目 <a class="header-anchor" href="#使用-create-next-app-创建新项目" aria-label="Permalink to &quot;使用 create-next-app 创建新项目&quot;">​</a></h3><ol><li>使用 <code>npx</code>（<code>npm</code> 的包执行工具）执行以下命令来创建一个新的 Next.js 应用。这会自动下载 <code>create-next-app</code> 并创建一个新的项目。</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">npx</span><span style="color:#9ECBFF;"> create-next-app</span><span style="color:#9ECBFF;"> my-next-app</span></span></code></pre></div><ol start="2"><li>进入项目目录：</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#9ECBFF;"> my-next-app</span></span></code></pre></div><ol start="3"><li>启动开发服务器：</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#9ECBFF;"> run</span><span style="color:#9ECBFF;"> dev</span></span></code></pre></div><p>或者，如果你使用的是 <code>yarn</code>：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#9ECBFF;"> dev</span></span></code></pre></div><p>这样，你的 Next.js 应用就会在 <code>localhost:3000</code> 上启动，你可以在浏览器中访问它。</p><h3 id="手动添加到现有的-react-项目" tabindex="-1">手动添加到现有的 React 项目 <a class="header-anchor" href="#手动添加到现有的-react-项目" aria-label="Permalink to &quot;手动添加到现有的 React 项目&quot;">​</a></h3><p>如果你已经有一个 React 项目，你可以通过安装以下几个包来将其转换为 Next.js 项目：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#9ECBFF;"> install</span><span style="color:#9ECBFF;"> next</span><span style="color:#9ECBFF;"> react</span><span style="color:#9ECBFF;"> react-dom</span></span></code></pre></div><p>或者，如果你使用 <code>yarn</code>：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#9ECBFF;"> add</span><span style="color:#9ECBFF;"> next</span><span style="color:#9ECBFF;"> react</span><span style="color:#9ECBFF;"> react-dom</span></span></code></pre></div><p>之后，你需要在 <code>package.json</code> 中添加几个脚本来启动 Next.js：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#79B8FF;">  &quot;dev&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;next&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#79B8FF;">  &quot;build&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;next build&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#79B8FF;">  &quot;start&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;next start&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="next-js-的基本目录和工作结构" tabindex="-1">Next.js 的基本目录和工作结构 <a class="header-anchor" href="#next-js-的基本目录和工作结构" aria-label="Permalink to &quot;Next.js 的基本目录和工作结构&quot;">​</a></h3><p>Next.js 有一个约定优于配置的原则，这意味着项目的基本目录结构和工作方式已经被预设好了。以下是 Next.js 应用的常见目录结构：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>my-next-app/</span></span>\n<span class="line"><span>|-- pages/</span></span>\n<span class="line"><span>|   |-- index.js        # 主页</span></span>\n<span class="line"><span>|   |-- _app.js         # 可选的 App 组件，用于初始化页面</span></span>\n<span class="line"><span>|   `-- [其他页面].js</span></span>\n<span class="line"><span>|-- public/             # 静态文件放置目录，如图片、favicon 等</span></span>\n<span class="line"><span>|-- styles/             # 样式文件目录</span></span>\n<span class="line"><span>|-- node_modules/       # 项目依赖目录</span></span>\n<span class="line"><span>|-- package.json        # 项目依赖和脚本配置文件</span></span>\n<span class="line"><span>|-- next.config.js      # 可选的 Next.js 配置文件</span></span>\n<span class="line"><span>`-- [其他配置文件]</span></span></code></pre></div><ul><li><code>pages/</code>：这是存放页面组件的目录，每个文件都会自动对应一个路由。例如，<code>pages/about.js</code> 会对应 <code>/about</code> 这个路由。</li><li><code>public/</code>：用于存放静态资源，如图片、字体等，这些文件可以直接通过 <code>/</code> 路径在浏览器中访问。</li><li><code>styles/</code>：保存 CSS 文件的地方，你可以根据需要组织你的样式文件。</li><li><code>node_modules/</code>：存放所有安装的依赖包。</li><li><code>package.json</code>：定义了项目的依赖和可运行的脚本。</li><li><code>next.config.js</code>：可选的配置文件，用于自定义 Next.js 的高级配置，比如添加环境变量、修改构建的 Webpack 配置等。</li></ul><p>通过这种目录结构，Next.js 提供了一个强大且灵活的框架，允许开发者迅速启动项目并按需进行扩展。</p><h3 id="最小工作流程" tabindex="-1">最小工作流程 <a class="header-anchor" href="#最小工作流程" aria-label="Permalink to &quot;最小工作流程&quot;">​</a></h3><ol><li><p><code>pages/index.tsx</code> 或 <code>pages/index.js</code> 这是 Next.js 应用程序的默认入口页面，也就是访问站点根 URL（如 <code>http://localhost:3000/</code>）时加载的页面。使用 TypeScript 编写时后缀为 <code>.tsx</code>，纯 JavaScript 时为 <code>.js</code>。</p></li><li><p><code>pages/_app.tsx</code> 或 <code>pages/_app.js</code> 这是 Next.js 中的一个特殊文件，它允许你初始化所有页面。你可以使用这个文件来保持页面布局，保持状态（如 Redux 或 MobX）时使用，或者用于全局 CSS 的插入。这个文件是可选的，如果你的应用不需要全局初始化，则不需要创建它。</p></li><li><p><code>pages/_document.tsx</code> 或 <code>pages/_document.js</code><code>_document</code> 也是一个特殊文件，用于自定义文档结构。Next.js 会使用这个文件来渲染网站的 HTML 结构。默认情况下，Next.js 为你生成文档结构，但如果你需要自定义 <code>&lt;html&gt;</code> 和 <code>&lt;body&gt;</code> 标签或在 <code>&lt;head&gt;</code> 中添加额外的链接和脚本，你可以通过创建 <code>_document</code> 文件来实现。这个文件也是可选的，只有在需要自定义整个 HTML 页面结构时才需要它。</p></li><li><p><code>app/layout.tsx</code> 或 <code>app/layout.js</code><code>layout</code> 文件并不是 Next.js 的特定组件或约定。但在开发过程中，通常会创建一个 <code>Layout</code> 组件来封装页面结构，比如包含导航栏和页脚的共享布局。此组件可以在不同页面中复用，以便保持一致的外观和行为。通常，开发者会根据项目需要自行创建和组织 <code>Layout</code> 组件。</p></li><li><p><code>app/page.tsx</code> 或 <code>app/page.js</code> 这同样不是 Next.js 的特定组件或约定。它可能是开发者根据项目需要自定义的一个组件或页面逻辑。在实际的 Next.js 项目中，你可能不会看到这个文件，除非团队有特定的组织结构或命名习惯。</p></li></ol><p>工作流程如下：</p><ul><li>当用户访问网站时，Next.js 会根据请求的路径查找 <code>pages</code> 目录中相应的页面组件。</li><li>如果存在 <code>_app</code> 文件，Next.js 会使用它来初始化所有页面，你可以在这里插入全局样式或共享组件。</li><li>如果存在 <code>_document</code> 文件，Next.js 会使用它来构建 HTML 文档结构。这只会在服务器端渲染时发生，且仅用于初始页面加载。</li><li>如果你使用了 <code>Layout</code> 组件，通常会在 <code>_app</code> 文件中引入并包裹页面内容，从而为你的页面提供统一的布局。</li></ul><p>在实际的 Next.js 应用中，你可能会根据实际的需要添加或省略这些文件。例如，对于一个简单的项目，你可能只需要 <code>pages/index.tsx</code> 文件。对于复杂一点的项目，可能会加入 <code>_app.tsx</code> 和 <code>_document.tsx</code> 来进行全局布局和文档结构的自定义。其他如 <code>app/layout.tsx</code> 或 <code>app/page.tsx</code> 这样的文件则更多取决于你个人或团队的项目结构和组件组织方式。</p><h2 id="_4-目录结构" tabindex="-1">4. 目录结构 <a class="header-anchor" href="#_4-目录结构" aria-label="Permalink to &quot;4. 目录结构&quot;">​</a></h2><p>本页面提供了 Next.js 应用程序的项目结构概览。它涵盖了顶层文件和文件夹、配置文件，以及在 <code>app</code> 和 <code>pages</code> 目录内的路由约定。</p><p>点击文件和文件夹名称以了解每个约定的更多信息。</p><h3 id="顶层文件夹" tabindex="-1">顶层文件夹 <a class="header-anchor" href="#顶层文件夹" aria-label="Permalink to &quot;顶层文件夹&quot;">​</a></h3><p>顶层文件夹用于组织应用程序的代码和静态资源。</p><ul><li><code>app</code> - 应用路由器</li><li><code>pages</code> - 页面路由器</li><li><code>public</code> - 将要提供服务的静态资源</li><li><code>src</code> - 可选的应用源代码文件夹</li></ul><h3 id="顶层文件" tabindex="-1">顶层文件 <a class="header-anchor" href="#顶层文件" aria-label="Permalink to &quot;顶层文件&quot;">​</a></h3><p>顶层文件用于配置应用程序，管理依赖项，运行中间件，集成监控工具，以及定义环境变量。</p><h4 id="next-js" tabindex="-1">Next.js <a class="header-anchor" href="#next-js" aria-label="Permalink to &quot;Next.js&quot;">​</a></h4><ul><li><code>next.config.js</code> - Next.js 的配置文件</li><li><code>package.json</code> - 项目依赖和脚本</li><li><code>instrumentation.ts</code> - OpenTelemetry 和检测文件</li><li><code>middleware.ts</code> - Next.js 请求中间件</li><li><code>.env</code> - 环境变量</li><li><code>.env.local</code> - 本地环境变量</li><li><code>.env.production</code> - 生产环境变量</li><li><code>.env.development</code> - 开发环境变量</li><li><code>.eslintrc.json</code> - ESLint 的配置文件</li><li><code>.gitignore</code> - Git 忽略的文件和文件夹</li><li><code>next-env.d.ts</code> - Next.js 的 TypeScript 声明文件</li><li><code>tsconfig.json</code> - TypeScript 的配置文件</li><li><code>jsconfig.json</code> - JavaScript 的配置文件</li></ul><h3 id="app-路由约定" tabindex="-1">app 路由约定 <a class="header-anchor" href="#app-路由约定" aria-label="Permalink to &quot;app 路由约定&quot;">​</a></h3><p>以下文件约定用于在应用路由器中定义路由和处理元数据。</p><h4 id="路由文件" tabindex="-1">路由文件 <a class="header-anchor" href="#路由文件" aria-label="Permalink to &quot;路由文件&quot;">​</a></h4><ul><li><code>layout</code> <code>.js .jsx .tsx</code> - 布局</li><li><code>page</code> <code>.js .jsx .tsx</code> - 页面</li><li><code>loading</code> <code>.js .jsx .tsx</code> - 加载 UI</li><li><code>not-found</code> <code>.js .jsx .tsx</code> - 未找到页面 UI</li><li><code>error</code> <code>.js .jsx .tsx</code> - 错误 UI</li><li><code>global-error</code> <code>.js .jsx .tsx</code> - 全球错误 UI</li><li><code>route</code> <code>.js .ts</code> - API 端点</li><li><code>template</code> <code>.js .jsx .tsx</code> - 重新渲染的布局</li><li><code>default</code> <code>.js .jsx .tsx</code> - 平行路由备用页面</li></ul><h4 id="嵌套路由" tabindex="-1">嵌套路由 <a class="header-anchor" href="#嵌套路由" aria-label="Permalink to &quot;嵌套路由&quot;">​</a></h4><ul><li><code>folder/</code> - 路由片段</li><li><code>folder/folder/</code> - 嵌套路由片段</li></ul><h4 id="动态路由" tabindex="-1">动态路由 <a class="header-anchor" href="#动态路由" aria-label="Permalink to &quot;动态路由&quot;">​</a></h4><ul><li><code>[folder]</code> - 动态路由片段</li><li><code>[...folder]</code> - 捕获所有路由片段</li><li><code>[[...folder]]</code> - 可选的捕获所有路由片段</li></ul><h4 id="路由组和私有文件夹" tabindex="-1">路由组和私有文件夹 <a class="header-anchor" href="#路由组和私有文件夹" aria-label="Permalink to &quot;路由组和私有文件夹&quot;">​</a></h4><ul><li><code>(folder)</code> - 不影响路由的路由组</li><li><code>_folder</code> - 让该文件夹及其所有子片段退出路由</li></ul><h4 id="平行路由和拦截路由" tabindex="-1">平行路由和拦截路由 <a class="header-anchor" href="#平行路由和拦截路由" aria-label="Permalink to &quot;平行路由和拦截路由&quot;">​</a></h4><ul><li><code>@folder</code> - 命名插槽</li><li><code>(.)folder</code> - 拦截同一层级</li><li><code>(..)folder</code> - 拦截上一层级</li><li><code>(..)(..)folder</code> - 拦截两层以上</li><li><code>(...)folder</code> - 从根部拦截</li></ul><h4 id="元数据文件约定" tabindex="-1">元数据文件约定 <a class="header-anchor" href="#元数据文件约定" aria-label="Permalink to &quot;元数据文件约定&quot;">​</a></h4><h5 id="应用图标" tabindex="-1">应用图标 <a class="header-anchor" href="#应用图标" aria-label="Permalink to &quot;应用图标&quot;">​</a></h5><ul><li><code>favicon</code> <code>.ico</code> - 网站图标文件</li><li><code>icon</code> <code>.ico .jpg .jpeg .png .svg</code> - 应用图标文件</li><li><code>icon</code> <code>.js .ts .tsx</code> - 生成的应用图标</li><li><code>apple-icon</code> <code>.jpg .jpeg .png</code> - Apple 应用图标文件</li><li><code>apple-icon</code> <code>.js .ts .tsx</code> - 生成的 Apple 应用图标</li></ul><h5 id="open-graph-和-twitter-图片" tabindex="-1">Open Graph 和 Twitter 图片 <a class="header-anchor" href="#open-graph-和-twitter-图片" aria-label="Permalink to &quot;Open Graph 和 Twitter 图片&quot;">​</a></h5><ul><li><code>opengraph-image</code> <code>.jpg .jpeg .png .gif</code> - Open Graph 图片文件</li><li><code>opengraph-image</code> <code>.js .ts .tsx</code> - 生成的 Open Graph 图片</li><li><code>twitter-image</code> <code>.jpg .jpeg .png .gif</code> - Twitter 图片文件</li><li><code>twitter-image</code> <code>.js .ts .tsx</code> - 生成的 Twitter 图片</li></ul><h5 id="seo" tabindex="-1">SEO <a class="header-anchor" href="#seo" aria-label="Permalink to &quot;SEO&quot;">​</a></h5><ul><li><code>sitemap</code> <code>.xml</code> - 网站地图文件</li><li><code>sitemap</code> <code>.js .ts</code> - 生成的网站地图</li><li><code>robots</code> <code>.txt</code> - 机器人文件</li><li><code>robots</code> <code>.js .ts</code> - 生成的机器人文件</li></ul><h3 id="pages-路由约定" tabindex="-1">pages 路由约定 <a class="header-anchor" href="#pages-路由约定" aria-label="Permalink to &quot;pages 路由约定&quot;">​</a></h3><p>以下文件约定用于在页面路由器中定义路由。</p><h4 id="特殊文件" tabindex="-1">特殊文件 <a class="header-anchor" href="#特殊文件" aria-label="Permalink to &quot;特殊文件&quot;">​</a></h4><ul><li><code>_app</code> <code>.js .jsx .tsx</code> - 自定义应用程序</li><li><code>_document</code> <code>.js .jsx .tsx</code> - 自定义文档</li><li><code>_error</code> <code>.js .jsx .tsx</code> - 自定义错误页面</li><li><code>404</code> <code>.js .jsx .tsx</code> - 404 错误页面</li><li><code>500</code> <code>.js .jsx .tsx</code> - 500 错误页面</li></ul><h4 id="路由" tabindex="-1">路由 <a class="header-anchor" href="#路由" aria-label="Permalink to &quot;路由&quot;">​</a></h4><h5 id="文件夹约定" tabindex="-1">文件夹约定 <a class="header-anchor" href="#文件夹约定" aria-label="Permalink to &quot;文件夹约定&quot;">​</a></h5><ul><li><code>index</code> <code>.js .jsx .tsx</code> - 主页</li><li><code>folder/index</code> <code>.js .jsx .tsx</code> - 嵌套页面</li></ul><h5 id="文件约定" tabindex="-1">文件约定 <a class="header-anchor" href="#文件约定" aria-label="Permalink to &quot;文件约定&quot;">​</a></h5><ul><li><code>index</code> <code>.js .jsx .tsx</code> - 主页</li><li><code>file</code> <code>.js .jsx .tsx</code> - 页面文件</li></ul><h4 id="动态路由-1" tabindex="-1">动态路由 <a class="header-anchor" href="#动态路由-1" aria-label="Permalink to &quot;动态路由&quot;">​</a></h4><h5 id="文件夹约定-1" tabindex="-1">文件夹约定 <a class="header-anchor" href="#文件夹约定-1" aria-label="Permalink to &quot;文件夹约定&quot;">​</a></h5><ul><li><code>[folder]/index</code> <code>.js .jsx .tsx</code> - 动态路由片段</li><li><code>[...folder]/index</code> <code>.js .jsx .tsx</code> - 捕获所有路由片段</li><li><code>[[...folder]]/index</code> <code>.js .jsx .tsx</code> - 可选的捕获所有路由片段</li></ul><h5 id="文件约定-1" tabindex="-1">文件约定 <a class="header-anchor" href="#文件约定-1" aria-label="Permalink to &quot;文件约定&quot;">​</a></h5><ul><li><code>[file]</code> <code>.js .jsx .tsx</code> - 动态路由片段</li><li><code>[...file]</code> <code>.js .jsx .tsx</code> - 捕获所有路由片段</li><li><code>[[...file]]</code> <code>.js .jsx .tsx</code> - 可选的捕获所有路由片段</li></ul><h2 id="_5-路由" tabindex="-1">5. 路由 <a class="header-anchor" href="#_5-路由" aria-label="Permalink to &quot;5. 路由&quot;">​</a></h2><p>Next.js 拥有两种不同的路由器：App Router 和 Pages Router。App Router 是一种较新的路由器，它允许你使用 React 的最新特性，例如服务器组件（Server Components）和流式传输（Streaming）。Pages Router 是原始的 Next.js 路由器，它允许你构建服务端渲染（Server-Rendered）的 React 应用程序，并且继续支持旧版本的 Next.js 应用程序。</p><h3 id="pages-路由器-pages-router" tabindex="-1">pages 路由器（Pages Router） <a class="header-anchor" href="#pages-路由器-pages-router" aria-label="Permalink to &quot;pages 路由器（Pages Router）&quot;">​</a></h3><p><code>pages</code> 目录是 Next.js 最初提供的默认路由机制。在这个目录下，文件系统被用作路由器的基础，即每个文件（除了一些特殊的文件如 <code>_app.js</code> 或 <code>_document.js</code>）都会自动映射到一个 URL 路径上。例如：</p><ul><li><code>pages/index.js</code> 映射到站点的根 URL (<code>/</code>)。</li><li><code>pages/about.js</code> 映射到 <code>/about</code>。</li><li><code>pages/posts/[id].js</code> 映射到一个动态路由，如 <code>/posts/1</code>。</li></ul><p>这种方式可以快速创建新页面，并且无需手动配置路由。</p><h3 id="app-路由器-app-router" tabindex="-1">app 路由器（App Router） <a class="header-anchor" href="#app-路由器-app-router" aria-label="Permalink to &quot;app 路由器（App Router）&quot;">​</a></h3><p>随着 Next.js 12 的发布，<code>app</code> 路径（目前处于实验阶段）引入了一个新的路由系统，它提供了更灵活的路由定义方式，包括对路由组、布局、加载状态、错误处理和并行路由等的支持。<code>app</code> 目录允许开发者使用文件和文件夹来定义路由，同时也可以用各种新的文件命名约定来控制路由行为。例如：</p><ul><li><code>app/page.js</code> 是一个页面。</li><li><code>app/layout.js</code> 是一个布局，可以被包含在多个页面中。</li><li><code>app/loading.js</code> 定义了加载状态的 UI。</li><li><code>app/404.js</code> 提供了一个404错误页面。</li><li><code>app/(users)/[id].js</code> 创建了一个路由组。</li></ul><p>使用 <code>app</code> 路由器，你可以更细致地控制应用的路由和渲染行为，更好地组织代码逻辑。</p><h2 id="_6-示例" tabindex="-1">6. 示例 <a class="header-anchor" href="#_6-示例" aria-label="Permalink to &quot;6. 示例&quot;">​</a></h2><h3 id="_6-1-前后端接口声明-调用" tabindex="-1">6.1 前后端接口声明&amp;调用 <a class="header-anchor" href="#_6-1-前后端接口声明-调用" aria-label="Permalink to &quot;6.1 前后端接口声明&amp;调用&quot;">​</a></h3><p>当然，这里给出一个使用 Next.js 的示例，展示如何在前端页面与后端 API 接口之间进行调用。</p><h4 id="_1-创建后端-api-接口" tabindex="-1">1. 创建后端 API 接口 <a class="header-anchor" href="#_1-创建后端-api-接口" aria-label="Permalink to &quot;1. 创建后端 API 接口&quot;">​</a></h4><p>首先，你需要在 Next.js 的 <code>pages/api</code> 目录下创建一个 API 接口。这将使得 Next.js 为你自动处理 API 路由。例如，创建一个简单的 API 接口来获取用户数据。</p><p>在 <code>pages/api/user.js</code> 文件中：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Example of a simple API handler in Next.js</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> handler</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">  // Here you would fetch user data from a database or another API</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> user</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    id: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&quot;John Doe&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    email: </span><span style="color:#9ECBFF;">&quot;john@example.com&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // Return user data as JSON</span></span>\n<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">(user);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h4 id="_2-前端页面调用-api-接口" tabindex="-1">2. 前端页面调用 API 接口 <a class="header-anchor" href="#_2-前端页面调用-api-接口" aria-label="Permalink to &quot;2. 前端页面调用 API 接口&quot;">​</a></h4><p>接着，在前端页面中调用上述 API。你可以使用 <code>fetch</code> API 或者其他 HTTP 客户端库，如 <code>axios</code>，来进行 API 调用。</p><p>在 <code>pages/index.js</code> 文件中：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useEffect, useState } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &quot;react&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> Home</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setUser</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> useState</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">  useEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">    // Fetch the user data from the API</span></span>\n<span class="line"><span style="color:#F97583;">    async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> fetchUserData</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">      const</span><span style="color:#79B8FF;"> response</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/api/user&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">      const</span><span style="color:#79B8FF;"> userData</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#B392F0;">      setUser</span><span style="color:#E1E4E8;">(userData);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">    fetchUserData</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }, []); </span><span style="color:#6A737D;">// The empty array causes this effect to only run on mount</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // Render user data if available</span></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;User Profile&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      {user </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;Name: {user.name}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;Email: {user.email}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      ) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;Loading...&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      )}</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>在本例中，当页面加载时，<code>useEffect</code> 钩子会触发，并执行 <code>fetchUserData</code> 函数来获取用户数据。数据被成功获取后，它会更新状态 <code>user</code>，并重新渲染页面以显示用户的信息。如果数据尚未加载完成，则会显示 &quot;Loading...&quot;。</p><p>请注意，这里的 API 调用是指向相对路径 <code>/api/user</code>，这是因为 Next.js 会自动处理这个路径到我们在 <code>pages/api/user.js</code> 中定义的 API 接口。</p><h3 id="_6-2-登录场景" tabindex="-1">6.2 登录场景 <a class="header-anchor" href="#_6-2-登录场景" aria-label="Permalink to &quot;6.2 登录场景&quot;">​</a></h3><p>要实现一个完整的登录示例，包括登录后的鉴权、登录态保持和退出机制，在 Next.js 中通常会涉及到 API 路由、Cookies 或者其他存储方式以及前端状态管理。以下是一个简化的示例：</p><h4 id="_1-创建登录-api-接口" tabindex="-1">1. 创建登录 API 接口 <a class="header-anchor" href="#_1-创建登录-api-接口" aria-label="Permalink to &quot;1. 创建登录 API 接口&quot;">​</a></h4><p>在 <code>pages/api/login.js</code> 文件中，我们创建一个处理登录请求的 API：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Example of a login API handler in Next.js</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> handler</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (req.method </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;POST&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">    const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">username</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">password</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req.body;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // 这里应该有身份验证逻辑。例如，检查用户名和密码是否匹配。</span></span>\n<span class="line"><span style="color:#6A737D;">    // 为简化示例，我们假设任何用户名和密码组合都是有效的。</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (username </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> password) {</span></span>\n<span class="line"><span style="color:#6A737D;">      // 登录成功，设置 Cookie 以保持登录状态</span></span>\n<span class="line"><span style="color:#E1E4E8;">      res.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Set-Cookie&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;token=valid-token; path=/; HttpOnly&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      res.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">({ message: </span><span style="color:#9ECBFF;">&quot;登录成功&quot;</span><span style="color:#E1E4E8;"> });</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">      // 登录失败</span></span>\n<span class="line"><span style="color:#E1E4E8;">      res.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">401</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">({ message: </span><span style="color:#9ECBFF;">&quot;登录失败&quot;</span><span style="color:#E1E4E8;"> });</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">    // 不支持除 POST 之外的方法</span></span>\n<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Allow&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;POST&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">405</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`Method ${</span><span style="color:#E1E4E8;">req</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">method</span><span style="color:#9ECBFF;">} Not Allowed`</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>在上述代码中，我们仅接受 POST 请求，并简单地假设所有的登录尝试都是有效的。在实际应用中，你需要添加真实的身份验证逻辑并安全地处理密码。</p><h4 id="_2-创建前端登录页面" tabindex="-1">2. 创建前端登录页面 <a class="header-anchor" href="#_2-创建前端登录页面" aria-label="Permalink to &quot;2. 创建前端登录页面&quot;">​</a></h4><p>在前端，你需要一个表单来收集用户的用户名和密码，然后将这些信息发送到登录 API。</p><p>在 <code>pages/login.js</code> 文件中：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useState } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &quot;react&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Router </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &quot;next/router&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> Login</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">username</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setUsername</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> useState</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">password</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setPassword</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> useState</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#B392F0;"> handleSubmit</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    event.</span><span style="color:#B392F0;">preventDefault</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> response</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/api/login&quot;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      method: </span><span style="color:#9ECBFF;">&quot;POST&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      headers: { </span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;application/json&quot;</span><span style="color:#E1E4E8;"> },</span></span>\n<span class="line"><span style="color:#E1E4E8;">      body: </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">({ username, password }),</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (response.ok) {</span></span>\n<span class="line"><span style="color:#6A737D;">      // 登录成功，跳转到受保护的页面</span></span>\n<span class="line"><span style="color:#E1E4E8;">      Router.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/profile&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">      // 登录失败，显示错误消息</span></span>\n<span class="line"><span style="color:#B392F0;">      alert</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;登录失败&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">form</span><span style="color:#B392F0;"> onSubmit</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{handleSubmit}&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">label</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        用户名:</span></span>\n<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">input</span></span>\n<span class="line"><span style="color:#B392F0;">          type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span></span>\n<span class="line"><span style="color:#B392F0;">          value</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{username}</span></span>\n<span class="line"><span style="color:#B392F0;">          onChange</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> setUsername</span><span style="color:#E1E4E8;">(e.target.value)}</span></span>\n<span class="line"><span style="color:#E1E4E8;">        /&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">label</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">label</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        密码:</span></span>\n<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">input</span></span>\n<span class="line"><span style="color:#B392F0;">          type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;password&quot;</span></span>\n<span class="line"><span style="color:#B392F0;">          value</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{password}</span></span>\n<span class="line"><span style="color:#B392F0;">          onChange</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> setPassword</span><span style="color:#E1E4E8;">(e.target.value)}</span></span>\n<span class="line"><span style="color:#E1E4E8;">        /&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">label</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;submit&quot;</span><span style="color:#E1E4E8;">&gt;登录&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">form</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>在这个登录表单中，我们收集用户名和密码，然后将其作为 JSON 发送到登录 API。如果登录成功，我们会重定向用户到受保护的个人资料页面。</p><h4 id="_3-登录态保持和退出登录机制" tabindex="-1">3. 登录态保持和退出登录机制 <a class="header-anchor" href="#_3-登录态保持和退出登录机制" aria-label="Permalink to &quot;3. 登录态保持和退出登录机制&quot;">​</a></h4><p>登录状态通常由服务器通过设置 HTTP Cookie 来保持。在上述登录 API 中，我们设置了一个名为 &#39;token&#39; 的 Cookie。你可以在服务器上验证此 Cookie 以确认用户是否登录。</p><p>退出登录只需删除或清空 Cookie 即可。创建一个退出 API 接口：</p><p>在 <code>pages/api/logout.js</code> 文件中：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Example of a logout API handler in Next.js</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> handler</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">  // 删除登录 Cookie</span></span>\n<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#9ECBFF;">    &quot;Set-Cookie&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#9ECBFF;">    &quot;token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">({ message: </span><span style="color:#9ECBFF;">&quot;已退出登录&quot;</span><span style="color:#E1E4E8;"> });</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>然后在前端添加一个退出登录的按钮：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Router </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &quot;next/router&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> LogoutButton</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#B392F0;"> handleLogout</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> response</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/api/logout&quot;</span><span style="color:#E1E4E8;">, { method: </span><span style="color:#9ECBFF;">&quot;POST&quot;</span><span style="color:#E1E4E8;"> });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (response.ok) {</span></span>\n<span class="line"><span style="color:#6A737D;">      // 退出登录成功，重定向到首页</span></span>\n<span class="line"><span style="color:#E1E4E8;">      Router.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{handleLogout}&gt;退出登录&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h4 id="_4-登录后的鉴权" tabindex="-1">4. 登录后的鉴权 <a class="header-anchor" href="#_4-登录后的鉴权" aria-label="Permalink to &quot;4. 登录后的鉴权&quot;">​</a></h4><p>对于登录后的鉴权，你需要在服务端检查请求中是否包含有效的登录态（例如，检查 token Cookie）。对于需要鉴权的 API，你可以添加逻辑来确保只有已登录的用户才能访问：</p><p>在 <code>pages/api/protected.js</code> 文件中：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Example of a protected API handler in Next.js</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> handler</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">  // 检查 token Cookie</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">token</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req.cookies;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (token </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;valid-token&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">    // 用户已登录，可以访问受保护的资源</span></span>\n<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">({ data: </span><span style="color:#9ECBFF;">&quot;受保护的数据&quot;</span><span style="color:#E1E4E8;"> });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">    // 用户未登录或 token 无效</span></span>\n<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">401</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">({ message: </span><span style="color:#9ECBFF;">&quot;未授权&quot;</span><span style="color:#E1E4E8;"> });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>在实际应用中，你会使用更复杂的逻辑来生成和验证 token，可能还会使用刷新 token 机制等。</p><p>请记住，这只是一个简化的登录示例。在实际项目中，你应该为所有敏感操作使用 HTTPS 来保护数据的安全，确保 cookie 的安全设置，比如使用 <code>Secure</code> 和 <code>SameSite</code> 属性，并对密码进行哈希处理和加盐等安全措施。此外，你可能还需要考虑使用第三方认证服务，如 Auth0、Firebase Auth 或 NextAuth.js，它们为身份验证和会话管理提供了更鲁棒的解决方案。</p><h3 id="_6-3-接口平台场景" tabindex="-1">6.3 接口平台场景 <a class="header-anchor" href="#_6-3-接口平台场景" aria-label="Permalink to &quot;6.3 接口平台场景&quot;">​</a></h3><p>Next.js 的 API 路由允许你创建可以被其他域访问的接口服务。你可以创建无服务器函数（Serverless Functions）来处理 HTTP 请求，并通过设置适当的 CORS（跨源资源共享）策略，允许其他域名的请求访问你的 API。</p><p>以下是创建可以被其他域访问的 API 路由的步骤：</p><h4 id="步骤-1-创建-api-路由" tabindex="-1">步骤 1: 创建 API 路由 <a class="header-anchor" href="#步骤-1-创建-api-路由" aria-label="Permalink to &quot;步骤 1: 创建 API 路由&quot;">​</a></h4><p>在 <code>/pages/api</code> 目录下创建一个新的 <code>.js</code> 文件来定义你的 API 路由，例如 <code>hello.js</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// pages/api/hello.js</span></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> handler</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">({ message: </span><span style="color:#9ECBFF;">&quot;Hello World!&quot;</span><span style="color:#E1E4E8;"> });</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h4 id="步骤-2-设置-cors" tabindex="-1">步骤 2: 设置 CORS <a class="header-anchor" href="#步骤-2-设置-cors" aria-label="Permalink to &quot;步骤 2: 设置 CORS&quot;">​</a></h4><p>在你的 API 路由文件中，你可以使用 <code>Next.js</code> 提供的 <code>micro-cors</code> 或手动设置 HTTP 头来实现跨域资源共享。下面是一个手动设置 HTTP 头的示例：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// pages/api/hello.js</span></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> handler</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">  // 设置 CORS 头</span></span>\n<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Access-Control-Allow-Credentials&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Access-Control-Allow-Origin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 或者你可以指定允许的域名</span></span>\n<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#9ECBFF;">    &quot;Access-Control-Allow-Methods&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#9ECBFF;">    &quot;GET,OPTIONS,PATCH,DELETE,POST,PUT&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#9ECBFF;">    &quot;Access-Control-Allow-Headers&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#9ECBFF;">    &quot;X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 如果是 OPTIONS 请求，返回204 &#39;No Content&#39;</span></span>\n<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (req.method </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;OPTIONS&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">204</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // 其他请求，如 GET，处理并返回相应的数据</span></span>\n<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">({ message: </span><span style="color:#9ECBFF;">&quot;Hello World!&quot;</span><span style="color:#E1E4E8;"> });</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>这样设置后，你的 API 现在可以接受跨域请求。<code>Access-Control-Allow-Origin</code> 头部决定了哪些源可以访问资源。如果你想要限制特定的域名而非所有域都可以访问，可以将 <code>&#39;*&#39;</code> 替换为具体的源地址。</p><h2 id="_7-部署" tabindex="-1">7. 部署 <a class="header-anchor" href="#_7-部署" aria-label="Permalink to &quot;7. 部署&quot;">​</a></h2><p>如果你已经有一个自己的服务器，并配置了 Node.js 环境，那么部署 Next.js 应用会相对简单。以下是在你自己的服务器上部署 Next.js 应用的步骤：</p><h3 id="步骤-1-构建应用" tabindex="-1">步骤 1: 构建应用 <a class="header-anchor" href="#步骤-1-构建应用" aria-label="Permalink to &quot;步骤 1: 构建应用&quot;">​</a></h3><p>首先，在你的本地开发环境中构建 Next.js 应用。这将生成 <code>.next</code> 目录，其中包含了用于生产环境的优化过的应用版本。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">next</span><span style="color:#9ECBFF;"> build</span></span></code></pre></div><h3 id="步骤-2-安装依赖" tabindex="-1">步骤 2: 安装依赖 <a class="header-anchor" href="#步骤-2-安装依赖" aria-label="Permalink to &quot;步骤 2: 安装依赖&quot;">​</a></h3><p>在服务器上，导航到应用的目录，运行 <code>npm install</code> 或 <code>yarn</code> 来安装依赖（如果你没有一同上传 <code>node_modules</code> 目录）。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#9ECBFF;"> /path/to/your/app</span></span>\n<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#9ECBFF;"> install</span></span></code></pre></div><h3 id="步骤-3-启动应用" tabindex="-1">步骤 3: 启动应用 <a class="header-anchor" href="#步骤-3-启动应用" aria-label="Permalink to &quot;步骤 3: 启动应用&quot;">​</a></h3><p>使用 <code>next start</code> 来启动你的应用。该命令将会启动一个 Node.js 服务器，该服务器提供了生产环境下的 HTTP 服务。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">next</span><span style="color:#9ECBFF;"> start</span><span style="color:#79B8FF;"> -p</span><span style="color:#9ECBFF;"> YOUR_PORT</span></span></code></pre></div><p>其中 <code>YOUR_PORT</code> 是你希望应用运行的端口号（如80，443，3000等）。如果你不指定端口，Next.js 默认会使用 3000 端口。</p><h3 id="步骤-4-使用进程管理器-可选" tabindex="-1">步骤 4: 使用进程管理器（可选） <a class="header-anchor" href="#步骤-4-使用进程管理器-可选" aria-label="Permalink to &quot;步骤 4: 使用进程管理器（可选）&quot;">​</a></h3><p>在生产环境中，你可能会希望应用能够在后台运行，并在崩溃时自动重启。这时你可以使用进程管理器如 <code>pm2</code>。如果你还没有 <code>pm2</code>，可以通过 npm 安装它：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#9ECBFF;"> install</span><span style="color:#9ECBFF;"> pm2</span><span style="color:#79B8FF;"> -g</span></span></code></pre></div><p>然后，使用 <code>pm2</code> 启动你的 Next.js 应用：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">pm2</span><span style="color:#9ECBFF;"> start</span><span style="color:#9ECBFF;"> &quot;next start -p YOUR_PORT&quot;</span><span style="color:#79B8FF;"> --name</span><span style="color:#9ECBFF;"> &quot;nextjs-app&quot;</span></span></code></pre></div><p>这将启动你的应用，并允许 <code>pm2</code> 来管理它。</p><h3 id="步骤-5-设置环境变量-可选" tabindex="-1">步骤 5: 设置环境变量（可选） <a class="header-anchor" href="#步骤-5-设置环境变量-可选" aria-label="Permalink to &quot;步骤 5: 设置环境变量（可选）&quot;">​</a></h3><p>如果你的应用依赖于环境变量，确保在服务器上设置这些环境变量。你可以在服务器的 <code>.bashrc</code>、<code>.profile</code> 或其他适用于你的 shell 的配置文件中设置环境变量，或者在启动应用时直接设置：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ENV_VAR1</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">value1</span><span style="color:#E1E4E8;"> ENV_VAR2</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">value2</span><span style="color:#B392F0;"> pm2</span><span style="color:#9ECBFF;"> start</span><span style="color:#9ECBFF;"> &quot;next start -p YOUR_PORT&quot;</span><span style="color:#79B8FF;"> --name</span><span style="color:#9ECBFF;"> &quot;nextjs-app&quot;</span></span></code></pre></div><h3 id="步骤-6-反向代理设置-可选" tabindex="-1">步骤 6: 反向代理设置（可选） <a class="header-anchor" href="#步骤-6-反向代理设置-可选" aria-label="Permalink to &quot;步骤 6: 反向代理设置（可选）&quot;">​</a></h3><p>如果你在服务器上运行了 Nginx 或 Apache，你可能想要设置一个反向代理，将来自外部的请求转发到 Next.js 应用的端口上。这样可以让你使用 SSL，自定义域名，以及其他高级功能。</p><p>这是一个简单的 Nginx 反向代理配置示例：</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">server</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">    listen </span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">    server_name </span><span style="color:#E1E4E8;">yourdomain.com;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    location</span><span style="color:#B392F0;"> / </span><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#F97583;">        proxy_pass </span><span style="color:#E1E4E8;">http://localhost:YOUR_PORT;</span></span>\n<span class="line"><span style="color:#F97583;">        proxy_http_version </span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">        proxy_set_header </span><span style="color:#E1E4E8;">Upgrade $http_upgrade;</span></span>\n<span class="line"><span style="color:#F97583;">        proxy_set_header </span><span style="color:#E1E4E8;">Connection </span><span style="color:#9ECBFF;">&#39;upgrade&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">        proxy_set_header </span><span style="color:#E1E4E8;">Host $host;</span></span>\n<span class="line"><span style="color:#F97583;">        proxy_cache_bypass </span><span style="color:#E1E4E8;">$http_upgrade;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div>',166)]))}]]);export{e as __pageData,o as default};
