import{_ as s,c as n,b as a,o as l}from"./chunks/framework.CUf7xJpa.js";const e=JSON.parse('{"title":"Sentry部署与使用","description":"","frontmatter":{},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"部署","slug":"部署","link":"#部署","children":[{"level":3,"title":"步骤","slug":"步骤","link":"#步骤","children":[]},{"level":3,"title":"当前sentry平台部署","slug":"当前sentry平台部署","link":"#当前sentry平台部署","children":[]},{"level":3,"title":"部署中的问题","slug":"部署中的问题","link":"#部署中的问题","children":[]}]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[{"level":3,"title":"接入邮箱📮报警","slug":"接入邮箱📮报警","link":"#接入邮箱📮报警","children":[]},{"level":3,"title":"sentry通过https访问","slug":"sentry通过https访问","link":"#sentry通过https访问","children":[]},{"level":3,"title":"使用中的问题","slug":"使用中的问题","link":"#使用中的问题","children":[]}]},{"level":2,"title":"docker重启","slug":"docker重启","link":"#docker重启","children":[{"level":3,"title":"sentry-srouce map","slug":"sentry-srouce-map","link":"#sentry-srouce-map","children":[]},{"level":3,"title":"上传日志信息--手动上报","slug":"上传日志信息-手动上报","link":"#上传日志信息-手动上报","children":[]},{"level":3,"title":"设置变量","slug":"设置变量","link":"#设置变量","children":[]},{"level":3,"title":"设置全局变量","slug":"设置全局变量","link":"#设置全局变量","children":[]},{"level":3,"title":"创建警报规则","slug":"创建警报规则","link":"#创建警报规则","children":[]},{"level":3,"title":"release","slug":"release","link":"#release","children":[]}]},{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"relativePath":"business/sentry.md","filePath":"business/sentry.md"}');const p=s({name:"business/sentry.md"},[["render",function(s,e,p,o,t,r){return l(),n("div",null,e[0]||(e[0]=[a('<h1 id="sentry部署与使用" tabindex="-1">Sentry部署与使用 <a class="header-anchor" href="#sentry部署与使用" aria-label="Permalink to &quot;Sentry部署与使用&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>Sentry 为一套开源的应用监控和错误追踪的解决方案。这套解决方案由对应的各种语言的SDK和一套庞大的数据后台服务组成。应用需要通过与之绑定的token接入Sentry SDK完成数据上报配置。通过Sentry SDK的配置，还可以上报错误关联的版本信息、发布环境、同时Sentry SDK会自动捕获异常发生前的相关操作，便于后续异常追踪。异常数据上报到数据服务后，会通过过滤、关键信息提取、归纳展示在数据后台的Web页面中 官方地址：<a href="https://github.com/getsentry/onpremise" target="_blank" rel="noreferrer">https://github.com/getsentry/onpremise</a></p><h2 id="部署" tabindex="-1">部署 <a class="header-anchor" href="#部署" aria-label="Permalink to &quot;部署&quot;">​</a></h2><p>部署配置参考官网</p><ul><li>Docker 19.03.6+</li><li>Compose 1.28.0+</li><li>4 CPU Cores</li><li>8 GB RAM</li><li>20 GB Free Disk Space</li></ul><h3 id="步骤" tabindex="-1">步骤 <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><ol><li>git clone <a href="https://github.com/getsentry/onpremise.git" target="_blank" rel="noreferrer">https://github.com/getsentry/onpremise.git</a></li><li>cd onpremise</li><li>执行./install.sh ./install.sh --skip-user-prompt</li><li>docker compose up -d</li></ol><blockquote><p>提示: 目前sentry已经是docker容器化部署;如果我们想要整体走一下容器化部署的话，需要上面的步骤在一个linux的容器中操作，然后把linux的容器打包成一个新的镜像;然后在sre中新建一个应用，然后推送过去。之前和鸿钧、王博沟通，1.linux容器打包成镜像比较大，2。新建应用相对复杂一些；目前部署在线上xx机器中，二级域名<a href="https://sentry-zl.domain/%E6%8C%87%E5%90%91" target="_blank" rel="noreferrer">https://sentry-zl.domain/指向</a></p></blockquote><h3 id="当前sentry平台部署" tabindex="-1">当前sentry平台部署 <a class="header-anchor" href="#当前sentry平台部署" aria-label="Permalink to &quot;当前sentry平台部署&quot;">​</a></h3><p>sentry代码部署在/home/self-hosted sentry代码部署在/home/kooper/onpremise/</p><p>说明</p><ol><li>登录线上服务器需要通过堡垒机ksop.domain-- 堡垒机申请试用说明</li><li>线上地址<a href="https://sentry-zl.domain/" target="_blank" rel="noreferrer">https://sentry-zl.domain/</a> <a href="https://sentry-zl2.domain/" target="_blank" rel="noreferrer">https://sentry-zl2.domain/</a></li></ol><h3 id="部署中的问题" tabindex="-1">部署中的问题 <a class="header-anchor" href="#部署中的问题" aria-label="Permalink to &quot;部署中的问题&quot;">​</a></h3><p>注意： 拷贝的时候需要先拷贝到本地vscode中格式化，再粘贴到远端，避免有中文空格等因素影响</p><ol><li>docker-compose版本过低（改用docker compose（docker自带的命令））</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>curl -L https://github.com/docker/compose/releases/download/1.28.3/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>chmod +x /usr/local/bin/docker-compose</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>docker-compose --version</span></span></code></pre></div><ol start="2"><li>docker下载太慢</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>vim /etc/docker/daemon.json</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    {</span></span>\n<span class="line"><span>        &quot;registry-mirrors&quot;: [</span></span>\n<span class="line"><span>            &quot;https://registry.docker-cn.com&quot;,    //国内官方镜像</span></span>\n<span class="line"><span>            &quot;https://mirrors.tuna.tsinghua.edu.cn&quot;,   //清华镜像</span></span>\n<span class="line"><span>            &quot;http://hub-mirror.c.163.com&quot;,    //网易163镜像</span></span>\n<span class="line"><span>            &quot;https://docker.mirrors.ustc.edu.cn&quot;,   //中科大镜像</span></span>\n<span class="line"><span>        ]</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    // 新增文件 cron/sources.list</span></span>\n<span class="line"><span>    deb http://mirror.bjtu.edu.cn/debian bullseye main</span></span>\n<span class="line"><span>    deb http://mirror.bjtu.edu.cn/debian bullseye-updates main</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // cron/Dockerfile </span></span>\n<span class="line"><span>    ARG BASE_IMAGE</span></span>\n<span class="line"><span>    FROM ${BASE_IMAGE}</span></span>\n<span class="line"><span>    COPY sources.list /etc/apt/sources.list</span></span>\n<span class="line"><span>    RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends cron &amp;&amp; \\</span></span>\n<span class="line"><span>        rm -r /var/lib/apt/lists/*</span></span>\n<span class="line"><span>    COPY entrypoint.sh /entrypoint.sh</span></span>\n<span class="line"><span>    ENTRYPOINT [&quot;/entrypoint.sh&quot;]</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // .env</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 重启docker</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    sudo systemctl daemon-reload</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    sudo systemctl restart docker3</span></span></code></pre></div><ol start="3"><li>docker端口修改</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>// 原来默认是9000端口指向容器内的80端口，现在10.102.119.42的80端口直接指向容器内80端口</span></span>\n<span class="line"><span>    // .env</span></span>\n<span class="line"><span>    OMPOSE_PROJECT_NAME=sentry_onpremise</span></span>\n<span class="line"><span>    SENTRY_EVENT_RETENTION_DAYS=90</span></span>\n<span class="line"><span>    # You can either use a port number or an IP:PORT combo for SENTRY_BIND</span></span>\n<span class="line"><span>    # See https://docs.docker.com/compose/compose-file/#ports for more</span></span>\n<span class="line"><span>    SENTRY_BIND=80</span></span>\n<span class="line"><span>    # Set SENTRY_MAIL_HOST to a valid FQDN (host/domain name) to be able to send emails!</span></span>\n<span class="line"><span>    # SENTRY_MAIL_HOST=example.com</span></span>\n<span class="line"><span>    SENTRY_IMAGE=getsentry/sentry:nightly</span></span>\n<span class="line"><span>    SNUBA_IMAGE=getsentry/snuba:nightly</span></span>\n<span class="line"><span>    RELAY_IMAGE=getsentry/relay:nightly</span></span>\n<span class="line"><span>    SYMBOLICATOR_IMAGE=getsentry/symbolicator:nightly</span></span>\n<span class="line"><span>    WAL2JSON_VERSION=latest</span></span>\n<span class="line"><span>    SENTRY_EVENT_RETENTION_DAYS=30 // 数据保留最近30天 可以修改</span></span></code></pre></div><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><h3 id="接入邮箱📮报警" tabindex="-1">接入邮箱📮报警 <a class="header-anchor" href="#接入邮箱📮报警" aria-label="Permalink to &quot;接入邮箱📮报警&quot;">​</a></h3><ol><li><p>配置完成后，即可进入页面<a href="https://sentry-zl.domain/" target="_blank" rel="noreferrer">https://sentry-zl.domain/</a> 打开页面填入信息后即可进入sentry系统 <img src="/assets/img_16.BOE2NH5f.png" alt="img_16.png"></p></li><li><p>config.yml配置</p></li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">mail.backend:</span><span style="color:#9ECBFF;"> &#39;smtp&#39;</span></span>\n<span class="line"><span style="color:#B392F0;">mail.host:</span><span style="color:#9ECBFF;"> &#39;smtp.domain&#39;</span></span>\n<span class="line"><span style="color:#B392F0;">mail.port:</span><span style="color:#79B8FF;"> 25</span></span>\n<span class="line"><span style="color:#B392F0;">mail.username:</span><span style="color:#9ECBFF;"> &#39;xuzhe1@domain&#39;</span></span>\n<span class="line"><span style="color:#B392F0;">mail.password:</span><span style="color:#9ECBFF;"> &#39;*********&#39;</span></span>\n<span class="line"><span style="color:#B392F0;">mail.use-tls:</span><span style="color:#79B8FF;"> false</span></span>\n<span class="line"><span style="color:#6A737D;"># mail.use-ssl: true</span></span>\n<span class="line"><span style="color:#6A737D;"> # The email address to send on behalf of</span></span>\n<span class="line"><span style="color:#B392F0;"> mail.from:</span><span style="color:#9ECBFF;"> &#39;xuzhe1@domain&#39;</span></span></code></pre></div><ul><li>mail.backend：邮件发送方式；</li><li>mail.host: 邮件发送域名 ，使用的哪个邮箱可以去该邮箱文档中找到 smtp 发送域名；</li><li>mail.port: 邮件发送的端口号；</li><li>mail.username：用于 smtp 邮箱的账号；</li><li>mail.password：用于 smtp 邮箱的密码；</li><li>mail.use-tls：是否使用 tls 安全协议，这里填写 true 或 false，和 use-ssl 配置互斥；</li><li>mail.use-ssl：是否使用 ssl 安全协议，这里填写 true 或 false，和 use-tls 配置互斥；</li><li>mail.from：收到邮件时的发送人名称； 之后可以进入页面测试邮件发送<a href="https://sentry-zl.domain/manage/status/mail/" target="_blank" rel="noreferrer">https://sentry-zl.domain/manage/status/mail/</a></li></ul><h3 id="sentry通过https访问" tabindex="-1">sentry通过https访问 <a class="header-anchor" href="#sentry通过https访问" aria-label="Permalink to &quot;sentry通过https访问&quot;">​</a></h3><p>首先要修改 onpremise/sentry/config.yml system.url-prefix 配置，将其设置为我们访问的 Sentry 域名。 url-prefix 组成了项目的 DSN 地址，一定要保证格式正确。 <code>system.internal-url-prefix: &#39;https://sentry-zl.domain&#39;</code> 然后是 /sentry/sentry.conf.py 文件下的 SSL/TLS 配置，将原来注释的部分全部打开。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>###########</span></span>\n<span class="line"><span># SSL/TLS #</span></span>\n<span class="line"><span>###########</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># If you&#39;re using a reverse SSL proxy, you should enable the X-Forwarded-Proto</span></span>\n<span class="line"><span># header and enable the settings below</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>SECURE_PROXY_SSL_HEADER = (&#39;HTTP_X_FORWARDED_PROTO&#39;, &#39;https&#39;)</span></span>\n<span class="line"><span>SESSION_COOKIE_SECURE = True</span></span>\n<span class="line"><span>CSRF_COOKIE_SECURE = True</span></span>\n<span class="line"><span>SOCIAL_AUTH_REDIRECT_IS_HTTPS = True</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># End of SSL/TLS settings</span></span></code></pre></div><h3 id="使用中的问题" tabindex="-1">使用中的问题 <a class="header-anchor" href="#使用中的问题" aria-label="Permalink to &quot;使用中的问题&quot;">​</a></h3><p><img src="/assets/img_17.DM-pZrRG.png" alt="img_17.png"></p><p>org需要和sentry里面的对应</p><h2 id="docker重启" tabindex="-1">docker重启 <a class="header-anchor" href="#docker重启" aria-label="Permalink to &quot;docker重启&quot;">​</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> compose</span><span style="color:#9ECBFF;"> down</span></span>\n<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> compose</span><span style="color:#9ECBFF;"> build</span></span>\n<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> compose</span><span style="color:#9ECBFF;"> up</span><span style="color:#79B8FF;"> -d</span></span></code></pre></div><p>项目接入 Sentry 配置应在应用程序的生命周期中尽早进行。完成此操作后，Sentry 的 JavaScript SDK 会捕获所有未处理的异常和事务</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#9ECBFF;"> install</span><span style="color:#79B8FF;"> --save</span><span style="color:#9ECBFF;"> @sentry/vue</span><span style="color:#9ECBFF;"> @sentry/tracing</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">Sentry.init(</span><span style="color:#9ECBFF;">{</span></span>\n<span class="line"><span style="color:#B392F0;">  //</span><span style="color:#9ECBFF;"> Sentry</span><span style="color:#9ECBFF;"> 项目的</span><span style="color:#9ECBFF;"> dsn，可从项目设置中获取</span></span>\n<span class="line"><span style="color:#B392F0;">  dsn:</span><span style="color:#9ECBFF;"> &#39;https://23d1e539ef6c4cb6b14937fead1bf2ff@sentry-zl.domain/2&#39;,</span></span>\n<span class="line"><span style="color:#B392F0;">  //</span><span style="color:#9ECBFF;"> 初始参数配置内容</span></span>\n<span class="line"><span style="color:#B392F0;">  integrations:</span><span style="color:#E1E4E8;"> [new </span><span style="color:#9ECBFF;">Integrations.BrowserTracing</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#B392F0;">      routingInstrumentation:</span><span style="color:#9ECBFF;"> Sentry.vueRouterInstrumentation</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">router</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">,</span></span>\n<span class="line"><span style="color:#B392F0;">      tracingOrigins:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;my-site-url.com&quot;,</span><span style="color:#9ECBFF;"> /^</span><span style="color:#79B8FF;">\\/</span><span style="color:#9ECBFF;">/],</span></span>\n<span class="line"><span style="color:#E1E4E8;">  )</span><span style="color:#9ECBFF;">],</span></span>\n<span class="line"><span style="color:#B392F0;">  //</span><span style="color:#9ECBFF;"> 触发异常后发送给</span><span style="color:#9ECBFF;"> Sentry</span><span style="color:#9ECBFF;"> 的概率</span></span>\n<span class="line"><span style="color:#B392F0;">  tracesSampleRate:</span><span style="color:#9ECBFF;"> 1.0,</span></span>\n<span class="line"><span style="color:#B392F0;">  //</span><span style="color:#9ECBFF;"> 控制应捕获的面包屑</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">行为栈</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">的总量</span></span>\n<span class="line"><span style="color:#B392F0;">  maxBreadcrumbs:</span><span style="color:#9ECBFF;"> 20,</span></span>\n<span class="line"><span style="color:#B392F0;">  //</span><span style="color:#9ECBFF;"> 规定上下文数据结构的深度，默认为</span><span style="color:#79B8FF;"> 3</span></span>\n<span class="line"><span style="color:#B392F0;">  normalizeDepth:</span><span style="color:#9ECBFF;"> 100,</span></span>\n<span class="line"><span style="color:#B392F0;">  //</span><span style="color:#9ECBFF;"> 版本信息</span></span>\n<span class="line"><span style="color:#B392F0;">  release:</span><span style="color:#9ECBFF;"> &quot;common@1.0.0&quot;,</span></span>\n<span class="line"><span style="color:#B392F0;">  //</span><span style="color:#9ECBFF;"> 环境信息</span></span>\n<span class="line"><span style="color:#B392F0;">  environment:</span><span style="color:#9ECBFF;"> process.env.NODE_ENV,</span></span>\n<span class="line"><span style="color:#B392F0;">  //</span><span style="color:#9ECBFF;"> 钩子函数，在每次发送</span><span style="color:#9ECBFF;"> event</span><span style="color:#9ECBFF;"> 前触发</span></span>\n<span class="line"><span style="color:#B392F0;">  beforeSend(event</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#B392F0;">    //</span><span style="color:#9ECBFF;"> 网页应用刷新后设置的变量会消失，所以我选择在</span><span style="color:#9ECBFF;"> beforeSend</span><span style="color:#9ECBFF;"> 触发时插入用户信息</span></span>\n<span class="line"><span style="color:#B392F0;">    event.user</span><span style="color:#9ECBFF;"> =</span><span style="color:#9ECBFF;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">      userNick:</span><span style="color:#9ECBFF;"> &quot;xz&quot;,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#9ECBFF;"> event</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h3 id="sentry-srouce-map" tabindex="-1">sentry-srouce map <a class="header-anchor" href="#sentry-srouce-map" aria-label="Permalink to &quot;sentry-srouce map&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">//.npmrc</span></span>\n<span class="line"><span style="color:#E1E4E8;">sentrycli_cdnurl</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">https</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//npm.taobao.org/mirrors/sentry-cli</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// vue.config.js</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> SentryCliPlugin</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@sentry/webpack-plugin&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> SentryCliPlugin</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">    include: </span><span style="color:#9ECBFF;">&#39;./dist&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ignoreFile: </span><span style="color:#9ECBFF;">&#39;.gitignore&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    release: </span><span style="color:#9ECBFF;">&#39;production@1.2.0&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ignore: [</span><span style="color:#9ECBFF;">&#39;node_modules&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;webpack.config.js&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">    configFile: </span><span style="color:#9ECBFF;">&#39;.sentryclirc&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    urlPrefix: </span><span style="color:#9ECBFF;">&#39;~/&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// .sentryclirc</span></span>\n<span class="line"><span style="color:#E1E4E8;">[auth]</span></span>\n<span class="line"><span style="color:#E1E4E8;">token</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">c32f47d178064adeb3736742af42c34ebedf21aed43649bbb3d253a419e5c092</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">[defaults]</span></span>\n<span class="line"><span style="color:#E1E4E8;">url</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">https</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//sentry-zl.domain</span></span>\n<span class="line"><span style="color:#E1E4E8;">org</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">kso</span></span>\n<span class="line"><span style="color:#E1E4E8;">project</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">kso</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">zl</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">pc</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// package.json</span></span>\n<span class="line"><span style="color:#9ECBFF;">&quot;build&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;vue-cli-service build &amp;&amp; rm -fr ./dist/js/*.map&quot;</span><span style="color:#E1E4E8;">,</span></span></code></pre></div><h3 id="上传日志信息-手动上报" tabindex="-1">上传日志信息--手动上报 <a class="header-anchor" href="#上传日志信息-手动上报" aria-label="Permalink to &quot;上传日志信息--手动上报&quot;">​</a></h3><p>有时我们不仅仅要收集异常信息，还需要在页面中打 log 来收集页面运行数据，这时可以用 Sentry.captureMessage(err[, obj]) api，进行传输日志。使用方法与 captureException 一致，建议将 level 设置为 Info，便于与异常区分开来，避免触发我们设置的异常警报。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Sentry.</span><span style="color:#B392F0;">captureMessage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Something went fundamentally wrong&quot;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  contexts: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    text: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      hahah: </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  level: Sentry.Severity.Info,</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h3 id="设置变量" tabindex="-1">设置变量 <a class="header-anchor" href="#设置变量" aria-label="Permalink to &quot;设置变量&quot;">​</a></h3><p>捕捉异常还需要采集用户信息，在用户登录后需要通过 setUser 设置一下用户信息全局变量，如下所示</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Sentry.</span><span style="color:#B392F0;">setUser</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">    tenant: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        code: </span><span style="color:#79B8FF;">12345</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;测试公司&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        _id: </span><span style="color:#79B8FF;">12345</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    orgAccount: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        _id: </span><span style="color:#79B8FF;">54321</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        orgName: </span><span style="color:#9ECBFF;">&#39;是机构啦&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    user: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        _id: </span><span style="color:#9ECBFF;">&#39;8910JQ&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        loginName: </span><span style="color:#9ECBFF;">&#39;测试人员小Q&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>通过 beforeSnd 插入用户信息</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Sentry.</span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#F97583;">    ...</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#6A737D;"> \t  // 钩子函数，在每次发送 event 前触发</span></span>\n<span class="line"><span style="color:#B392F0;">    beforeSend</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">        // 在这里可根据业务情况发送用户信息</span></span>\n<span class="line"><span style="color:#E1E4E8;">        event.user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            userNick: </span><span style="color:#9ECBFF;">&#39;xiaohu&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        };</span></span>\n<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> event;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h3 id="设置全局变量" tabindex="-1">设置全局变量 <a class="header-anchor" href="#设置全局变量" aria-label="Permalink to &quot;设置全局变量&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 以下是 Sentry 定义的全局变量，可以直接使用 Sentry api 设置</span></span>\n<span class="line"><span style="color:#E1E4E8;">Sentry.</span><span style="color:#B392F0;">setUser</span><span style="color:#E1E4E8;">(object);</span></span>\n<span class="line"><span style="color:#E1E4E8;">Sentry.</span><span style="color:#B392F0;">tags</span><span style="color:#E1E4E8;">(object);</span></span>\n<span class="line"><span style="color:#E1E4E8;">Sentry.</span><span style="color:#B392F0;">extra</span><span style="color:#E1E4E8;">(object);</span></span>\n<span class="line"><span style="color:#E1E4E8;">Sentry.</span><span style="color:#B392F0;">level</span><span style="color:#E1E4E8;">(object);</span></span>\n<span class="line"><span style="color:#E1E4E8;">Sentry.</span><span style="color:#B392F0;">fingerprint</span><span style="color:#E1E4E8;">(object);</span></span>\n<span class="line"><span style="color:#6A737D;">// 通过 setContext，设置 key 值，可自定义随事件传递的变量名</span></span>\n<span class="line"><span style="color:#E1E4E8;">Sentry.</span><span style="color:#B392F0;">setContext</span><span style="color:#E1E4E8;">(key, context);</span></span></code></pre></div><h3 id="创建警报规则" tabindex="-1">创建警报规则 <a class="header-anchor" href="#创建警报规则" aria-label="Permalink to &quot;创建警报规则&quot;">​</a></h3><p>您可以为每个项目创建各种警报规则，并让 Sentry 知道您希望在应用程序中发生错误时通知的时间(when)、方式(how)和对象(whom)。 <a href="https://juejin.cn/post/7007607369962094599#heading-4" target="_blank" rel="noreferrer">https://juejin.cn/post/7007607369962094599#heading-4</a></p><h3 id="release" tabindex="-1">release <a class="header-anchor" href="#release" aria-label="Permalink to &quot;release&quot;">​</a></h3><p>其中一种方式在source map上传的时候创建, 另一种脚手架可以创建 sentry-cli？</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> SentryCliPlugin</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">    include: </span><span style="color:#9ECBFF;">&#39;./dist&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ignoreFile: </span><span style="color:#9ECBFF;">&#39;.gitignore&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    release: process.env.</span><span style="color:#79B8FF;">RELEASE_VERSION</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ignore: [</span><span style="color:#9ECBFF;">&#39;node_modules&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;vue.config.js&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">    configFile: </span><span style="color:#9ECBFF;">&#39;.sentryclirc&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    urlPrefix: </span><span style="color:#9ECBFF;">&#39;~/&#39;</span><span style="color:#6A737D;"> // 需要和publicPath保持一致</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><p>前端捕获异常分为全局捕获和单点捕获 • 全局捕获代码集中，易于管理 • 单点捕获作为补充，对某些特殊情况进行捕获，但分散，不利于管理</p><ol><li>全局捕获 ◦ 通过全局的接口，将捕获代码集中写在一个地方，可以利用的接口又 ▪ window.addEventListener(&#39;error&#39;) ▪ window.addEventListener(&#39;unhandledrejection&#39;) ▪ document.addEventListener(&#39;click&#39;) ▪ 等 ◦ 框架级别的全局监听 ▪ 例如axios中使用interceptor进行拦击 ▪ vue、react都有自己的错误采集接口 ◦ 通过对全局函数进行封装包裹，实现在在调用该函数时自动捕获异常 ◦ 对实例方法重写(Patch), 在原有功能基础上包裹一层 ▪ 例如对setTimeout进行重写，在使用方法不变的情况下也可以捕获异常</li><li>单点捕获 ◦ 在业务代码中对单个代码快进行包裹，活在逻辑流程中大点，实现有针对性的异常捕获 ◦ trye-catch ◦ 专门写一个函数来收集异常信息，在异常发生时，调用该函数 ◦ 专门写一个函数来包裹其他函数，得到一个新函数，该新函数运行结果和原函数一模一样，只是在发生异常时可以捕获异常 具体查看源码吧....</li></ol><h2 id="资料" tabindex="-1">资料 <a class="header-anchor" href="#资料" aria-label="Permalink to &quot;资料&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/7007607369962094599#heading-4" target="_blank" rel="noreferrer">Sentry Web 前端监控 - 官方最佳实践教程</a></li><li><a href="https://juejin.cn/post/6974424800563298341" target="_blank" rel="noreferrer">基于Sentry搭建前端异常监控系统</a></li></ul>',58)]))}]]);export{e as __pageData,p as default};
